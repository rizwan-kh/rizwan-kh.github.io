<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Rizwan Khanüë®üèª‚Äçüíª</title><link>https://rizwan-kh.github.io/posts/</link><description>Recent content in Posts on Rizwan Khanüë®üèª‚Äçüíª</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 04 Aug 2024 11:50:27 +0400</lastBuildDate><atom:link href="https://rizwan-kh.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use local provider in Terraform</title><link>https://rizwan-kh.github.io/posts/2024/08/how-to-use-local-provider-in-terraform/</link><pubDate>Sun, 04 Aug 2024 11:50:27 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2024/08/how-to-use-local-provider-in-terraform/</guid><description>Enable local Terraform provider for Testing/Development Introduction Recently, we faced an issue with databricks/databricks provider and we spend alomost 2 weeks figuring out an auth issue that we saw in the provider for storage_account for th Unity Catalog. And thus, we wanted to dive into the databricks provider golang code to see if we can add few debug statements and understand where it was failing. So we cloned the repo from GitHub, made the changes and used the contributing.</description><content type="html"><![CDATA[<h2 id="enable-local-terraform-provider-for-testingdevelopment">Enable local Terraform provider for Testing/Development</h2>
<h3 id="introduction">Introduction</h3>
<p>Recently, we faced an issue with <a href="https://github.com/databricks/terraform-provider-databricks">databricks/databricks</a> provider and we spend alomost 2 weeks figuring out an auth issue that we saw in the provider for storage_account for th Unity Catalog. And thus, we wanted to dive into the databricks provider golang code to see if we can add few debug statements and understand where it was failing. So we cloned the repo from GitHub, made the changes and used the <code>contributing.md</code> to learn how to build the package - it was as easy as running the command <code>make install</code> and the Makefile had all the magic command configured.</p>
<p>We got a binary locally available to use. Now we faced the challenge of how to use the local binary, as with each <code>terraform init</code> command, terraform was pulling the module from registry.terraform.io.</p>
<h3 id="setup">Setup</h3>
<p>Looking around the documents, we found a way and all it needed was to create a <code>~/.terraformrc</code> file with the below content</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>provider_installation <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  dev_overrides <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;registry.terraform.io/databricks/databricks&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/Users/rizwan/GitHub/databricks-terraform/&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># For all other providers, install them directly from their origin provider</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># registries as normal. If you omit this, Terraform will _only_ use</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># the dev_overrides block, and so no other providers will be available.</span>
</span></span><span style="display:flex;"><span>  direct <span style="color:#f92672">{}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>The after &ldquo;=&rdquo; sign contains the value of the directory where the binary exist, ensure the binary has the version number.</p>
<p>When you perform a new <code>terraform init</code> or <code>terraform apply</code>, you will be present with a warning, that it&rsquo;s using the local databricks provider and not the one available on the remote registry.terraform.io.</p>
]]></content></item><item><title>(Azure DevOps) ADF CI CD using Azure Pipeline</title><link>https://rizwan-kh.github.io/posts/2023/06/azure-devops-adf-ci-cd-using-azure-pipeline/</link><pubDate>Tue, 06 Jun 2023 21:28:21 -0500</pubDate><guid>https://rizwan-kh.github.io/posts/2023/06/azure-devops-adf-ci-cd-using-azure-pipeline/</guid><description>Automating Azure Data Factory deployments using Azure DevOps CI/CD Introduction In the ever-evolving landscape of data engineering, having a streamlined and automated process for deploying changes to Azure Data Factory (ADF) is crucial. Azure DevOps provides a robust platform for implementing Continuous Integration and Continuous Deployment (CI/CD) pipelines for ADF, allowing teams to deliver changes efficiently and maintain a reliable data processing workflow.
Why CI/CD for ADF? Azure Data Factory is a cloud-based data integration service that allows you to create, schedule, and manage data pipelines.</description><content type="html"><![CDATA[<p><img src="/azure-pipelines.png" alt="azure"></p>
<h1 id="automating-azure-data-factory-deployments-using-azure-devops-cicd">Automating Azure Data Factory deployments using Azure DevOps CI/CD</h1>
<h2 id="introduction">Introduction</h2>
<p>In the ever-evolving landscape of data engineering, having a streamlined and automated process for deploying changes to Azure Data Factory (ADF) is crucial. Azure DevOps provides a robust platform for implementing Continuous Integration and Continuous Deployment (CI/CD) pipelines for ADF, allowing teams to deliver changes efficiently and maintain a reliable data processing workflow.</p>
<h2 id="why-cicd-for-adf">Why CI/CD for ADF?</h2>
<p>Azure Data Factory is a cloud-based data integration service that allows you to create, schedule, and manage data pipelines. As data engineering projects grow in complexity, manual deployment processes become error-prone and time-consuming. CI/CD for ADF brings several benefits:</p>
<ul>
<li>
<p><strong>Efficiency:</strong> Automated deployments eliminate manual errors and reduce deployment time.</p>
</li>
<li>
<p><strong>Consistency:</strong> Ensures consistency across development, testing, and production environments.</p>
</li>
<li>
<p><strong>Version Control:</strong> Integrates seamlessly with version control systems for better code management.</p>
</li>
</ul>
<h2 id="tools-of-the-trade">Tools of the Trade</h2>
<p>To implement ADF CI/CD with Azure DevOps, we leverage two key PowerShell modules:</p>
<ol>
<li>
<p><strong>Az.DataFactory Module:</strong> This module allows us to manage Azure Data Factory resources using PowerShell commands.</p>
</li>
<li>
<p><strong><a href="https://github.com/Azure-Player/azure.datafactory.tools">azure.datafactory.tools Module</a>:</strong> This custom module provides cmdlets for deploying and managing Azure Data Factory artifacts.</p>
</li>
</ol>
<h2 id="implementing-cicd-with-azure-devops">Implementing CI/CD with Azure DevOps</h2>
<h3 id="1-setting-up-the-pipeline">1. Setting Up the Pipeline</h3>
<p>In your Azure DevOps project, create a new pipeline with the necessary triggers and configurations.</p>
<h3 id="2-folder-structure">2. Folder Structure</h3>
<p>We have a separate template repository for the pipeline code which has the shown folder structure.</p>
<table>
<thead>
<tr>
<th>S.No</th>
<th>Filename</th>
<th>Filetype</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>README.md</td>
<td>markdown</td>
<td>README markdown file</td>
</tr>
<tr>
<td>2</td>
<td>adf/build-template.yml</td>
<td>YAML</td>
<td>Validate and Build Template YAML file for ADF</td>
</tr>
<tr>
<td>3</td>
<td>adf/deploy-template.yml</td>
<td>YAML</td>
<td>Publish Template YAML file for ADF</td>
</tr>
</tbody>
</table>
<h4 id="validate-template---adf">Validate Template - ADF</h4>
<p>The Validate/Build template process involves installing the PowerShell module azure.datafactory.tools and then validating the Azure Data Factory (ADF) module. It consists of two stages: incremental and full-deploy. The decision of which stage to execute is determined by the value of the Azure Pipelines Library variable fulldeploy. If the value is true, the job BuildAndPublishFull is executed, which deploys the full ADF code available on the Git repository. If the value is false, the job BuildAndPublishIncremental is executed, which promotes only the files that have changed between the last two commits.</p>
<h4 id="publish-template---adf">Publish Template - ADF</h4>
<p>The Publish template process involves installing the PowerShell module azure.datafactory.tools and downloading the artifacts published in the Build/Validate stage. In this stage, dynamic variables are replaced based on the environment name, using the deployment/config-<!-- raw HTML omitted -->.csv file for variable replacement. After the variable replacement, the ADF files are published.</p>
<h3 id="3-cicd-triggers">3. CI/CD Triggers</h3>
<p>Set up CI triggers to automatically run the pipeline on code commits to your ADF repository. This ensures that any changes are validated and deployed promptly.</p>
<h3 id="4-incremental-and-full-deployment">4. Incremental and Full Deployment</h3>
<p>This logic is implemented in the validate script to perform either incremental or full deployment based on a flag. This flexibility allows for targeted updates or complete overhauls, depending on your requirements.</p>
<h2 id="template-pipeline-scripts">Template Pipeline Scripts</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># build-template.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">job</span>: <span style="color:#ae81ff">ValidateADFCode</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">powershell</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Install-Module Az.DataFactory -MinimumVersion &#34;1.10.0&#34; -Force
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Install-Module -Name &#34;azure.datafactory.tools&#34; -Force
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      Import-Module -Name &#34;azure.datafactory.tools&#34; -Force
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      $r = Test-AdfCode -RootFolder $pwd.Path
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      if ($r.ErrorCount -gt 0) {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          throw &#34;Error in Validation - $($r.ErrorCount) error(s) found. Cancelling the pipeline!&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      }</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#39;Validate Azure Data Factory Code&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">job</span>: <span style="color:#ae81ff">BuildAndPublishIncremental</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dependsOn</span>: <span style="color:#ae81ff">ValidateADFCode</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">and(succeeded(), eq(variables.fulldeploy, false))</span> <span style="color:#75715e"># only publish artifacts for incremental changes</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">checkout</span>: <span style="color:#ae81ff">git://x-ops/adf-devops-pipelines@main</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">checkout</span>: <span style="color:#ae81ff">self</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">fetchDepth</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;Incremental changes only&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;connectedServiceNameARM: $(connectedServiceNameARM)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;dataFactoryName: $(dataFactoryName)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;environment: $(environment)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;location: $(location)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;resourceGroupName: $(resourceGroupName)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      cd $(Build.Repository.Name)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      git status
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      git branch
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      diff=$(git diff HEAD..HEAD~ --name-only)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      mkdir -p adf
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      for file in $diff; do 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo $file &gt;&gt; changedFiles.txt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ## copy the files along with directory to a folder and publish that as artifact
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cp --parents $file adf/.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      done
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      ls -lrt adf/
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      cat changedFiles.txt</span>      
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">publish</span>: <span style="color:#ae81ff">$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/adf</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">artifact</span>: <span style="color:#ae81ff">ADFJson</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">job</span>: <span style="color:#ae81ff">BuildAndPublishFull</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dependsOn</span>: <span style="color:#ae81ff">ValidateADFCode</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">and(succeeded(), eq(variables.fulldeploy, true))</span> <span style="color:#75715e"># publish full adf artifacts</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">checkout</span>: <span style="color:#ae81ff">git://x-ops/adf-devops-pipelines@main</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">checkout</span>: <span style="color:#ae81ff">self</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">fetchDepth</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;Full Publish&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;connectedServiceNameARM: $(connectedServiceNameARM)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;dataFactoryName: $(dataFactoryName)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;environment: $(environment)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;location: $(location)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;resourceGroupName: $(resourceGroupName)&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      cd $(Build.Repository.Name)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      git status</span>      
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">publish</span>: <span style="color:#ae81ff">$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">artifact</span>: <span style="color:#ae81ff">ADFJson</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># deploy-template.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">deployment</span>: <span style="color:#ae81ff">Deploy</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#34;Publishing to ${{ parameters.environment }} environment&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">${{ parameters.environment }}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runOnce</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">deploy</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">powershell</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            Install-Module Az.DataFactory -MinimumVersion &#34;1.10.0&#34; -Force
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            Install-Module -Name &#34;azure.datafactory.tools&#34; -Force
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            Import-Module -Name &#34;azure.datafactory.tools&#34; -Force</span>            
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#39;Installing PowerShell Module&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">task</span>: <span style="color:#ae81ff">AzurePowerShell@5</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#39;Deploy Azure DataFactory&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">connectedServiceNameARM</span>: <span style="color:#ae81ff">$(connectedServiceNameARM)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">ScriptType</span>: <span style="color:#ae81ff">InlineScript</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">Inline</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              $opt = New-AdfPublishOption
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              $opt.DeleteNotInSource = $$(deleteNotInSource)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              Publish-AdfV2FromJson -RootFolder &#34;$(Pipeline.Workspace)/ADFJson/&#34; -ResourceGroupName &#34;$(resourceGroupName)&#34; -DataFactoryName &#34;$(dataFactoryName)&#34; -Location &#34;$(location)&#34; -Stage &#34;$(environment)&#34; -Option $opt</span>              
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">FailOnStandardError</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">azurePowerShellVersion</span>: <span style="color:#ae81ff">LatestVersion</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># azure-pipelines.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># this file will be in the ADF Repo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">pool</span>:  
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">vmImage</span>: <span style="color:#e6db74">&#39;ubuntu-latest&#39;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">repositories</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">repository</span>: <span style="color:#ae81ff">templates</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git    </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">x-ops/adf-devops-pipelines</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">group</span>: <span style="color:#ae81ff">adf-env-vg</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">BuildValidate</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Build and Validate ADF  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jobs</span>:  
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">template</span>: <span style="color:#ae81ff">adf/build-template.yml@templates</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">Publish2Dev</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#39;Publish ADF to Development&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dependsOn</span>: <span style="color:#e6db74">&#39;BuildValidate&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">and(succeeded(), eq(variables[&#39;Build.SourceBranch&#39;], &#39;refs/heads/main&#39;))</span> <span style="color:#75715e"># refer to main or tags</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">template</span>: <span style="color:#ae81ff">adf/adf-deploy-template.yml@templates</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">environment</span>: <span style="color:#e6db74">&#39;dev-env&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">group</span>: <span style="color:#ae81ff">adf-env-dev-vg</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">Publish2Prod</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">displayName</span>: <span style="color:#e6db74">&#39;Publish ADF to Production&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">dependsOn</span>: 
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">BuildValidate</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">Publish2Dev</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">condition</span>: <span style="color:#ae81ff">and(succeeded(), eq(variables[&#39;Build.SourceBranch&#39;], &#39;refs/heads/main&#39;))</span> <span style="color:#75715e"># refer to main or tags</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">template</span>: <span style="color:#ae81ff">adf/deploy-template.yml@templates</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">environment</span>: <span style="color:#e6db74">&#39;prod-env&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">group</span>: <span style="color:#ae81ff">adf-env-prod-vg</span>
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Automating CI/CD for Azure Data Factory using Azure DevOps and PowerShell provides a robust solution for managing data engineering workflows. With the power of version control, scripted deployments, and automated testing, teams can enhance collaboration and deliver high-quality data pipelines.</p>
<p>Start leveraging the benefits of ADF CI/CD today, and witness the transformation in your data engineering practices.</p>
<p>Happy Deploying!</p>
<hr>
]]></content></item><item><title>Reload nginx without restarting the container/pod</title><link>https://rizwan-kh.github.io/posts/2023/02/reload-nginx-without-restarting-the-container/pod/</link><pubDate>Wed, 08 Feb 2023 20:04:03 -0400</pubDate><guid>https://rizwan-kh.github.io/posts/2023/02/reload-nginx-without-restarting-the-container/pod/</guid><description>Introduction Today in a troubleshooting session, one of the pods we were working with had an Angular application exposed via an nginx server and we wanted to change a few settings in the custom-nginx.conf, for which the developer informed us that he would need to rebuild the image and the CI pipeline will take around 10-15mins for the build, scan and deploy.
I suggested two approaches
map custom-nginx.conf as a configmap in the pod restart/reload nginx process We went ahead with the second approach as it was the more time-saving option.</description><content type="html"><![CDATA[<p><img src="/nginx.png" alt="nginx"></p>
<h2 id="introduction">Introduction</h2>
<p>Today in a troubleshooting session, one of the pods we were working with had an Angular application exposed via an nginx server and we wanted to change a few settings in the custom-nginx.conf, for which the developer informed us that he would need to rebuild the image and the CI pipeline will take around 10-15mins for the build, scan and deploy.</p>
<p>I suggested two approaches</p>
<ul>
<li>map custom-nginx.conf as a configmap in the pod</li>
<li>restart/reload nginx process</li>
</ul>
<p>We went ahead with the second approach as it was the more time-saving option.</p>
<h2 id="steps">Steps</h2>
<p>Reload the nginx process on the pod using kubectl exec</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl exec -ti app-nginx-ifbsdy -n ui -- nginx -s reload
</span></span><span style="display:flex;"><span>2023/02/09 01:39:02 <span style="color:#f92672">[</span>notice<span style="color:#f92672">]</span> 3269#3269: signal process started
</span></span></code></pre></div><p>If you&rsquo;re running a docker container, exec inside the container</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker exec -it app-nginx nginx -s reload
</span></span><span style="display:flex;"><span>2023/02/09 01:39:02 <span style="color:#f92672">[</span>notice<span style="color:#f92672">]</span> 3269#3269: signal process started
</span></span></code></pre></div>]]></content></item><item><title>Working with dead container</title><link>https://rizwan-kh.github.io/posts/2022/07/working-with-dead-container/</link><pubDate>Sat, 16 Jul 2022 19:39:13 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2022/07/working-with-dead-container/</guid><description>I came across this question from a team member who wanted to troubleshoot a dead container. I use the below process and I thought why not do a small write-up to help the wider audience?
Usage The process is very simple - to save/commit the dead container to a new image and then start a new container with a sh entrypoint and debug the container. I consider you&amp;rsquo;re using docker, although similar equivalent commands for other container runtime alternatives like podman, ctr, etc.</description><content type="html"><![CDATA[<p><img src="/docker.png" alt="docker">
I came across this question from a team member who wanted to troubleshoot a dead container. I use the below process and I thought why not do a small write-up to help the wider audience?</p>
<h2 id="usage">Usage</h2>
<p>The process is very simple - to save/commit the dead container to a new image and then start a new container with a <code>sh</code> entrypoint and debug the container. I consider you&rsquo;re using docker, although similar equivalent commands for other container runtime alternatives like podman, ctr, etc. can also be found, the process will be similar.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># commit the stopped container to a new image</span>
</span></span><span style="display:flex;"><span>docker commit 25836caaa158 dead/test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run docker images to see the image in the list of images present on the host</span>
</span></span><span style="display:flex;"><span>docker images
</span></span><span style="display:flex;"><span>REPOSITORY    TAG     IMAGE ID       CREATED         SIZE  
</span></span><span style="display:flex;"><span>dead/test     latest  cc9db32dcc2d   <span style="color:#ae81ff">2</span> seconds ago   280.7MB
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># start a new container with shell entrypoint to debug</span>
</span></span><span style="display:flex;"><span>docker run -it --rm --entrypoint sh dead/test
</span></span></code></pre></div><p>After your debugging is completed, feel free to delete the image</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker rmi dead/test
</span></span></code></pre></div>]]></content></item><item><title>Integration of Azure AD as OIDC identity provider for Kubernetes</title><link>https://rizwan-kh.github.io/posts/2022/03/integration-of-azure-ad-as-oidc-identity-provider-for-kubernetes/</link><pubDate>Mon, 14 Mar 2022 18:23:08 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2022/03/integration-of-azure-ad-as-oidc-identity-provider-for-kubernetes/</guid><description>Introduction In my project, we are using many flavours of Kubernetes viz. EKS, AKS, GKE, RKE, ACK. RBAC for all these clusters is managed via a central Active Directory as well as the user authentication, and this is achieved centrally by onboarding all the clusters on Rancher to manage all Kubernetes clusters.
I had a requirement where we couldn&amp;rsquo;t onboard the users to our Active Directory, and the plan was to give them access to the Kubernetes cluster via Azure AD external users(or guest users).</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In my project, we are using many flavours of Kubernetes viz. EKS, AKS, GKE, RKE, ACK. RBAC for all these clusters is managed via a central Active Directory as well as the user authentication, and this is achieved centrally by onboarding all the clusters on Rancher to manage all Kubernetes clusters.</p>
<p>I had a requirement where we couldn&rsquo;t onboard the users to our Active Directory, and the plan was to give them access to the Kubernetes cluster via Azure AD external users(or guest users).</p>
<p>OIDC-based authentication is natively supported by Kubernetes and we will be taking advantage of this to set up authentication and authorization using Azure AD.</p>
<h2 id="setup">Setup</h2>
<h3 id="setup-azure-ad-app-registration">Setup Azure AD App registration</h3>
<ul>
<li>Click on New Registration</li>
<li>Provide a name viz. <code>k8s-auth-app</code></li>
<li>Select <code>Accounts in this organizational directory only (MyAccount only - Single tenant)</code></li>
<li>Click <code>Register</code></li>
</ul>
<p>After the app is created, there is a couple of configuration that needs to be performed.</p>
<ul>
<li>Click on <code>Authentication</code> and under <code>Advance settings</code> and check the <code>Allow public client flows</code> and save it</li>
</ul>
<hr>
<ul>
<li>check if platform needs to be added and if yes, then add a platform of type Web with redirect URI as <code>http://localhost/red</code> and select <code>ID tokens (used for implicit and hybrid flows)</code></li>
</ul>
<hr>
<ul>
<li>
<p>If you want group to be part of your OIDC, under Token configuration click Add groups claim. Select Security groups and Group ID. Groups created in AAD can only be included by their ObjectID and not name.</p>
</li>
<li>
<p>Copy the <code>Application (client) ID</code> and <code>Directory (tenant) ID</code> to be used later.</p>
</li>
</ul>
<h3 id="configure-kubernetes-api-server">Configure Kubernetes API Server</h3>
<p>Kubernetes provides a way to configure OIDC-compatible identity providers via flags passed to the kube-apiserver component. We need to the below flags while starting the kube-apiserver</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>--oidc-client-id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;spn:&lt;application id&gt;&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--oidc-issuer-url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://sts.windows.net/&lt;azure AD tenant&gt;/&#34;</span>
</span></span><span style="display:flex;"><span>--oidc-username-claim<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;email&#34;</span> <span style="color:#75715e"># this will be `upn` if you want to authenticate direct member users of Azure AD and not guest users</span>
</span></span></code></pre></div><p>If you have created your cluster using <a href="https://kops.sigs.k8s.io/">KOPS</a>, you can add the below in the cluster configuration and perform an update and rolling update to re-create the master nodes to enable the authentication</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kubeAPIServer</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">oidcClientID</span>: <span style="color:#ae81ff">spn:&lt;application ID&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">oidcIssuerURL</span>: <span style="color:#ae81ff">https://sts.windows.net/&lt;azure AD tenant&gt;/</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">oidcUsernameClaim</span>: <span style="color:#ae81ff">upn</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">oidcUsernamePrefix</span>: <span style="color:#e6db74">&#39;aad:&#39;</span>
</span></span></code></pre></div><p>After the master nodes are up and running, the server configuration is completed. We will proceed with configuring clients</p>
<h3 id="client-configuration">Client configuration</h3>
<p>Since mostly, we use <code>kubectl</code> to interact with Kubernetes, we will configure kubectl to use - <a href="https://github.com/Azure/kubelogin">kubelogin</a> which is a <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins">client-go credential (exec) plugin</a> implementing azure authentication. This plugin provides features that are not available in kubectl. It is supported on kubectl v1.11+</p>
<ul>
<li>azure cli</li>
</ul>
<p>We will explain below how to configure both</p>
<h4 id="install-azurekubelogin">Install Azure/kubelogin</h4>
<p>I followed the installation instructions from <a href="https://github.com/Azure/kubelogin">https://github.com/Azure/kubelogin</a>:</p>
<p>Install using homebrew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew install Azure/kubelogin/kubelogin
</span></span></code></pre></div><p>Install directly from Github</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>wget https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
</span></span><span style="display:flex;"><span>unzip kubelogin-linux-amd64.zip -d kubelogin
</span></span><span style="display:flex;"><span>mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/
</span></span><span style="display:flex;"><span>rm -r kubelogin*
</span></span></code></pre></div><h4 id="install-azure-cli">Install Azure cli</h4>
<p>Install using homebrew</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew update <span style="color:#f92672">&amp;&amp;</span> brew install azure-cli
</span></span></code></pre></div><p>Although not preferred by many, using the script we can install per below</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>curl -L https://aka.ms/InstallAzureCli | bash
</span></span></code></pre></div><h4 id="configure-kubectl">Configure kubectl</h4>
<p>The below kubeconfig contains sample garbage value, please replace the below fields with the proper value</p>
<ul>
<li>certificate-authority-data</li>
<li>server</li>
<li>value for server-id</li>
<li>value for client-id</li>
<li>value for tenant-id</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># using kubelogin</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">clusters</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">cluster</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certificate-authority-data</span>: <span style="color:#ae81ff">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tC ...REDACTED STRING</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://34DA2A37GFSDXY7GFYWGE7ABA34Q11R0.myk8s.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s-aad</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">contexts</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cluster</span>: <span style="color:#ae81ff">k8s-aad</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">user</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">current-context</span>: <span style="color:#ae81ff">k8s-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">preferences</span>: {}
</span></span><span style="display:flex;"><span><span style="color:#f92672">users</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">user</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">exec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">client.authentication.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">get-token</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">environment</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">AzurePublicCloud</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">server-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">client-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">tenant-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">67xxx5c-xxxx-xxxx-xxxx-254xxxxx9ccf</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: <span style="color:#ae81ff">kubelogin</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>: <span style="color:#66d9ef">null</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># using azure cli</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">clusters</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">cluster</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certificate-authority-data</span>: <span style="color:#ae81ff">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tC ...REDACTED STRING</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://34DA2A37GFSDXY7GFYWGE7ABA34Q11R0.myk8s.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s-aad</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">contexts</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cluster</span>: <span style="color:#ae81ff">k8s-aad</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">user</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">k8s-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">current-context</span>: <span style="color:#ae81ff">k8s-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">preferences</span>: {}
</span></span><span style="display:flex;"><span><span style="color:#f92672">users</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">user</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">auth-provider</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">config</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">apiserver-id</span>: <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">client-id</span>: <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">environment</span>: <span style="color:#ae81ff">AzurePublicCloud</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tenant-id</span>: <span style="color:#ae81ff">67xxx5c-xxxx-xxxx-xxxx-254xxxxx9ccf</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">azure</span>
</span></span></code></pre></div><h3 id="authentication">Authentication</h3>
<p>Post completion of this setup, issue <code>kubectl</code> command to get the instruction to authenticate yourself; Note this will only authenticate you, you would need to configure RBAC to allow the users to interact with the cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl get pods
</span></span><span style="display:flex;"><span>To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code EJQH9Q8LS to authenticate.
</span></span></code></pre></div><h3 id="authorization">Authorization</h3>
<p>We would need to setup RBAC for different users and groups as per our need, for that I created 3 Azure AD groups and mapped them as below</p>
<ol>
<li>k8s-admins</li>
<li>k8s-editors</li>
<li>k8s-viewers</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/abe95a71-b52a-43f2-9095-fecd4f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-admins</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cluster-admin</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:abe95a71-b52a-43f2-9095-fecd4f6ef58d </span> <span style="color:#75715e"># group ID setup</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:rizwan.khan@mycontoso.com </span> <span style="color:#75715e"># user setup</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/0bec3baa-511d-4816-ae62-2758d6023cf1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-editors</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">edit</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:0bec3baa-511d-4816-ae62-2758d6023cf1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/03e95a71-b92a-4cf2-9895-fecd3f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-viewers</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">view</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:03e95a71-b92a-4cf2-9895-fecd3f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span></code></pre></div><p>After these RBAC are set, I added my user and a couple of others in those groups and voila, we were all set and good to go. We can also set up RoleBindings per namespace and access level as per requirement.</p>
]]></content></item><item><title>Hashicorp Vault &amp; Azure AD Identity Integration</title><link>https://rizwan-kh.github.io/posts/2022/02/hashicorp-vault-azure-ad-identity-integration/</link><pubDate>Tue, 15 Feb 2022 19:31:58 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2022/02/hashicorp-vault-azure-ad-identity-integration/</guid><description>Introduction In this post, we will be implementing Hashicorp Vault authentication with Microsoft Azure AD as an identity provider using OIDC(OpenID Connect). The default token authentication is always enabled.
Configuration There are two configurations that we had to do to achieve this with Azure AD, one is for app registration in the Azure Portal and the other one is on Vault - enabling the OIDC based auth. The steps for both are described below.</description><content type="html"><![CDATA[<p><img src="/vault-auth-basic.webp" alt="OIDC"></p>
<h2 id="introduction">Introduction</h2>
<p>In this post, we will be implementing Hashicorp Vault authentication with Microsoft Azure AD as an identity provider using OIDC(OpenID Connect). The default <strong>token</strong> authentication is always enabled.</p>
<h2 id="configuration">Configuration</h2>
<p>There are two configurations that we had to do to achieve this with Azure AD, one is for app registration in the Azure Portal and the other one is on Vault - enabling the OIDC based auth. The steps for both are described below.</p>
<h3 id="azure-ad-app-registration">Azure AD App Registration</h3>
<p>Navigate to Azure AD in the Azure portal and initiate a new registration under &lsquo;App Registration&rsquo;. Give a name to the app and select web under Redirect URI and add http://localhost:8250/oidc/callback and Register. We need to add more Redirect URI which we will do once the app is created. Copy the Tenant ID and Client ID(we will need those later). Under Authentication, we need to add Redirect URI based on the Vault URL. Create a secret and copy it for later use. We will also need to permit Microsoft Graph API Permission for &ldquo;Group.Read.All&rdquo;.</p>
<p>In short, we need the below from Microsoft Azure:</p>
<ul>
<li>Register 1 App under App registration in Azure AD with name vault-aad-auth</li>
<li>web-based Redirect URI for the below URLs
<ul>
<li>http://localhost:8250/oidc/callback</li>
<li>https://localhost:8250/oidc/callback</li>
<li><a href="https://vault.x-ops.com:8200/ui/vault/auth/oidc/oidc/callback">https://vault.x-ops.com:8200/ui/vault/auth/oidc/oidc/callback</a></li>
<li><a href="https://vault.x-ops.com/ui/vault/auth/oidc/oidc/callbac">https://vault.x-ops.com/ui/vault/auth/oidc/oidc/callbac</a></li>
</ul>
</li>
<li>Create a secret and copy the value</li>
<li>Copy the Directory(tenant) ID and Application(client) ID</li>
<li>Microsoft Graph API Permission for Group.Read.All</li>
</ul>
<h3 id="vault-configurations">Vault Configurations</h3>
<h4 id="enable-oidc">enable OIDC</h4>
<p>Enabling the OIDC based auth is the first thing we need to do, if you want to configure multiple OIDCs, we can change the path on which OIDC is initialized.  Go to the Access tab at top of the Vault UI page and click on &lsquo;Enable new method +&rsquo; under Auth methods, alternatively, you can use Vault CLI to enable this using the below command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault auth enable oidc
</span></span></code></pre></div><h4 id="configure-oidc">configure OIDC</h4>
<p>Post initializing the OIDC authentication, we need to configure OIDC using the below OIDC command, here we will need the Tenant ID, client ID, and secret that we created in the Azure AD App registration step. Replace the values in the below command before applying.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault write auth/oidc/config <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>oidc_discovery_url<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://login.microsoftonline.com/TENANT_ID/v2.0&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>oidc_client_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;CLIENT_ID&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>oidc_client_secret<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;SECRET_REDACTED&#34;</span>
</span></span></code></pre></div><h4 id="configure-role">configure role</h4>
<p>Replace the vault URL in the below <em>allowed_redirect_uris</em> as applicable and only keep one among the last two depending on which port vault is exposed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault write auth/oidc/role/aad <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  user_claim<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;email&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  oidc_scopes<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://graph.microsoft.com/.default&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  groups_claim<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;groups&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  policies<span style="color:#f92672">=</span>default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  ttl<span style="color:#f92672">=</span>1h <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  allowed_redirect_uris<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://localhost:8250/oidc/callback&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  allowed_redirect_uris<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://localhost:8250/oidc/callback&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  allowed_redirect_uris<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://vault.x-ops.com:8200/ui/vault/auth/oidc/oidc/callback&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  allowed_redirect_uris<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://vault.x-ops.com/ui/vault/auth/oidc/oidc/callback&#34;</span>
</span></span></code></pre></div><h4 id="verify-oidc-login-with-the-above-role">verify OIDC login with the above role</h4>
<p>You can now try to log in using the above role via the below command or use the Vault UI with the OIDC method and role <code>aad</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault login -method<span style="color:#f92672">=</span>oidc role<span style="color:#f92672">=</span>aad
</span></span></code></pre></div><p>You will be authenticated to log in but won&rsquo;t be able to see any credentials yet as policies are not yet set, which will be completed below</p>
<h4 id="create-two-policy-per-team---read-only-and-readwritedelete">create two policy per team - read-only and read/write/delete</h4>
<pre tabindex="0"><code># admin policy for kv backend at path kv/
path &#34;kv/*&#34; {
    capabilities = [&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;list&#34;, &#34;delete&#34;]
}
</code></pre><pre tabindex="0"><code># read-only policy for kv backend at path kv/
path &#34;kv/*&#34; {
    capabilities = [&#34;read&#34;, &#34;list&#34;]
}
</code></pre><p>Save the two policies in two files named - <code>devops-admin-policy.hcl</code> and <code>devops-ro-policy.hcl</code>. Use the below command to write these policies</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault policy write team-devops-admin-policy <span style="color:#e6db74">&#34;devops-admin-policy.hcl&#34;</span>
</span></span><span style="display:flex;"><span>vault policy write team-devops-ro-policy <span style="color:#e6db74">&#34;devops-ro-policy.hcl&#34;</span>
</span></span></code></pre></div><h4 id="create-or-select-azure-ad-groups-mapped-to-the-two-policies-per-team">create or select azure AD groups mapped to the two policies per team</h4>
<p>Create two Azure AD groups and map the corresponding users as applicable and note down the <strong>Object(Group) ID</strong> for both the groups - one will be used for admin users and one for read-only users</p>
<h4 id="create-group-mapping">create group mapping</h4>
<p>Post group creation, we need to perform two tasks</p>
<ul>
<li>create groups in Vault and attach policies</li>
<li>create identity mapping between the AAD groups and vault groups</li>
</ul>
<h5 id="internal-vault-group">internal vault group</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vault write identity/group name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;devops-admins&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;external&#34;</span> policies<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;team-devops-admin-policy&#34;</span>
</span></span><span style="display:flex;"><span>vault write identity/group name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;devops-ro&#34;</span> type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;external&#34;</span> policies<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;team-devops-ro-policy&#34;</span>
</span></span></code></pre></div><p>Post execution, note down the canonical ID for both groups which will be used in mapping with</p>
<h5 id="external-aad-group-mapping">external AAD group mapping</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># vault write identity/group-alias name=&#34;&lt;azuread-group-object-id&gt;&#34; mount_accessor=&#34;oidc_mount_accessor&#34; canonical_id=&#34;&lt;canonical-id&gt;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for admin group</span>
</span></span><span style="display:flex;"><span>vault write identity/group-alias name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;7f8a791a-45ac-49a7-8883-406k2pfq844a&#34;</span> mount_accessor<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;auth_oidc_a26f03c3&#34;</span> canonical_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;383344sf-88x5-19s5-da01-9e0011foe9x3&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for the read-only users group</span>
</span></span><span style="display:flex;"><span>vault write identity/group-alias name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;7f8a791a-3222-cc33-8899-4061122b334a&#34;</span> mount_accessor<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;auth_oidc_a26f03c3&#34;</span> canonical_id<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3883336f-8555-1aa5-dww1-9e1122xae9b3&#34;</span>
</span></span></code></pre></div><p>Now you can try to log in with the OIDC and role as <code>aad</code>; Provide your Azure credentials and you will be authenticated and if authorized will able to log in and view the authorized credentials.</p>
]]></content></item><item><title>Integration of Azure AD as OIDC identity provider for AWS EKS</title><link>https://rizwan-kh.github.io/posts/2021/12/integration-of-azure-ad-as-oidc-identity-provider-for-aws-eks/</link><pubDate>Wed, 22 Dec 2021 23:40:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2021/12/integration-of-azure-ad-as-oidc-identity-provider-for-aws-eks/</guid><description>Introduction In my project, we are using many flavours of Kubernetes viz. EKS, AKS, GKE, RKE, ACK. RBAC for all these clusters are managed via a central Active Directory as well as the user authentication, and this is achieved centrally by onboarding all the cluster on Rancher to manage all Kubernetes cluster.
I had a requirement where we couldn&amp;rsquo;t onboard the users to our Active Directory, and the plan was to give them access to Amazon EKS via an Azure AD external users(or guest users).</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In my project, we are using many flavours of Kubernetes viz. EKS, AKS, GKE, RKE, ACK. RBAC for all these clusters are managed via a central Active Directory as well as the user authentication, and this is achieved centrally by onboarding all the cluster on Rancher to manage all Kubernetes cluster.</p>
<p>I had a requirement where we couldn&rsquo;t onboard the users to our Active Directory, and the plan was to give them access to Amazon EKS via an Azure AD external users(or guest users).</p>
<p>Now, <a href="https://aws.amazon.com/about-aws/whats-new/2021/02/amazon-eks-clusters-support-user-authentication-oidc-compatible-identity-providers/">Amazon supports user authentication with OIDC compatible identity providers</a>, I tried my hands at integrating AAD guest users to access this EKS.</p>
<h2 id="setup">Setup</h2>
<h3 id="setup-azure-ad-app-registration">Setup Azure AD App registration</h3>
<ul>
<li>Click on New Registration</li>
<li>Provide a name viz. <code>eks-auth-app</code></li>
<li>Select <code>Accounts in this organizational directory only (MyAccount only - Single tenant)</code></li>
<li>Click <code>Register</code></li>
</ul>
<p>After the app is created, there is a couple of configuration that needs to be performed.</p>
<ul>
<li>Click on <code>Authentication</code> and under <code>Advance settings</code> and check the <code>Allow public client flows</code> and save it</li>
</ul>
<hr>
<ul>
<li>check if platform needs to be added and if yes, then add a platform of type Web with redirect URI as <code>http://localhost/red</code> and select <code>ID tokens (used for implicit and hybrid flows)</code></li>
</ul>
<hr>
<ul>
<li>
<p>If you want group to be part of your OIDC, under Token configuration click Add groups claim. Select Security groups and Group ID. Groups created in AAD can only be included by their ObjectID and not name.</p>
</li>
<li>
<p>Copy the <code>Application (client) ID</code> and <code>Directory (tenant) ID</code> to be used later.</p>
</li>
</ul>
<h3 id="configure-amazon-eks">Configure Amazon EKS</h3>
<p>Amazon provides a way to configure OIDC-compatible identity providers via the management console. Navigate to Authentication under Configuration in the EKS cluster panel when you select your cluster.</p>
<ul>
<li>Click on <code>Associate Identity Provider</code>
<ul>
<li>Issuer URL: <code>https://sts.windows.net/[Directory (tenant) ID]</code></li>
<li>Client ID: <code>[Application (client) ID]</code></li>
<li>Username claim: <code>email</code>
<ul>
<li>(this will be <code>upn</code> if you want to authenticate direct member users of Azure AD and not guest users)</li>
</ul>
</li>
<li>Groups claim: <code>groups</code></li>
<li>Username prefix: <code>aad:</code></li>
<li>Groups prefix: <code>aad:</code></li>
</ul>
</li>
<li>If you want to add tags to identify the service principal or any other detail, you can add tags and save.</li>
<li>This will update your OIDC identity provider in the API server and this takes some time.(For me it took almost 40-50 minutes on each trial)</li>
</ul>
<p>Now the server configuration is completed. We will proceed with configuring clients</p>
<h3 id="client-configuration">Client configuration</h3>
<p>Since mostly, we use <code>kubectl</code> to interact with Kubernetes, we will configure kubectl to use <a href="https://github.com/Azure/kubelogin">kubelogin</a> which is a <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins">client-go credential (exec) plugin</a> implementing azure authentication. This plugin provides features that are not available in kubectl. It is supported on kubectl v1.11+</p>
<h4 id="install-azurekubelogin">Install Azure/kubelogin</h4>
<p>I followed the installation instructions from <a href="https://github.com/Azure/kubelogin">https://github.com/Azure/kubelogin</a>:</p>
<p>Install using homebrew:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew install Azure/kubelogin/kubelogin
</span></span></code></pre></div><p>Install directly from Github</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>wget https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
</span></span><span style="display:flex;"><span>unzip kubelogin-linux-amd64.zip -d kubelogin
</span></span><span style="display:flex;"><span>mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/
</span></span><span style="display:flex;"><span>rm -r kubelogin*
</span></span></code></pre></div><h4 id="configure-kubectl">Configure kubectl</h4>
<p>The below kubeconfig contains sample garbage value, please replace the below fields with the proper value</p>
<ul>
<li>certificate-authority-data</li>
<li>server</li>
<li>value for server-id</li>
<li>value for client-id</li>
<li>value for tenant-id</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">clusters</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">cluster</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certificate-authority-data</span>: <span style="color:#ae81ff">LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tC ...REDACTED STRING</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">server</span>: <span style="color:#ae81ff">https://34DA2A37GFSDXY7GFYWGE7ABA34Q11R0.gr7.us-east-1.eks.amazonaws.com</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aws-eks-aad</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">contexts</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">context</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">cluster</span>: <span style="color:#ae81ff">aws-eks-aad</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">user</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aws-eks-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">current-context</span>: <span style="color:#ae81ff">aws-eks-azure-user</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Config</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">preferences</span>: {}
</span></span><span style="display:flex;"><span><span style="color:#f92672">users</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">azure-user</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">user</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">exec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">client.authentication.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">get-token</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">environment</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">AzurePublicCloud</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">server-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">client-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">a3xxxx4fe-xxxx-xxxx-xxxx-dexxxxxx210</span>
</span></span><span style="display:flex;"><span>      - --<span style="color:#ae81ff">tenant-id</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">67xxx5c-xxxx-xxxx-xxxx-254xxxxx9ccf</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: <span style="color:#ae81ff">kubelogin</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>: <span style="color:#66d9ef">null</span>
</span></span></code></pre></div><h3 id="authentication">Authentication</h3>
<p>Post completion of this setup, issue <code>kubectl</code> command to get the instruction to authenticate yourself; Note this will only authenticate you, you would need to configure RBAC to allow the users to interact with the cluster.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl get pods
</span></span><span style="display:flex;"><span>To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code EJQH9Q8LS to authenticate.
</span></span></code></pre></div><h3 id="authorization">Authorization</h3>
<p>We would need to setup RBAC for different users and groups as per our needs, for that I created 3 Azure AD groups and mapped them below</p>
<ol>
<li>eks-admins</li>
<li>eks-editors</li>
<li>eks-viewers</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/abe95a71-b52a-43f2-9095-fecd4f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-admins</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cluster-admin</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:abe95a71-b52a-43f2-9095-fecd4f6ef58d </span> <span style="color:#75715e"># group ID setup</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">User</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:rizwan.khan@mycontoso.com </span> <span style="color:#75715e"># user setup</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/0bec3baa-511d-4816-ae62-2758d6023cf1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-editors</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">edit</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:0bec3baa-511d-4816-ae62-2758d6023cf1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">for.ref.AAD.Group</span>: <span style="color:#ae81ff">https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupDetailsMenuBlade/Overview/groupId/03e95a71-b92a-4cf2-9895-fecd3f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad-cluster-viewers</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">view</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Group</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aad:03e95a71-b92a-4cf2-9895-fecd3f6ef58d</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span></code></pre></div><p>After these RBAC are set, I added my user and a couple of others in those groups and voila, we were all set and good to go.</p>
]]></content></item><item><title>Trivy - Scan Container Images</title><link>https://rizwan-kh.github.io/posts/2021/12/trivy-scan-container-images/</link><pubDate>Tue, 14 Dec 2021 23:10:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2021/12/trivy-scan-container-images/</guid><description>Trivy Trivy is a scanner for vulnerabilities in container images, file systems, git repositories and configuration. It&amp;rsquo;s an Aqua Security open-source project that can be easily used to integrate with our existing CI CD pipeline or used as a stand-alone tool to scan container images deployed on the Kubernetes cluster.
We were using Clair previous to our switch to Trivy as we analyzed both the tools and found Trivy to be more helpful for the longer run - it was faster, had more CVE database updates as compared to Clair and didn&amp;rsquo;t depend on external clients to interact/scan.</description><content type="html"><![CDATA[<p><img src="/trivy.png" alt="trivy"></p>
<h2 id="trivy">Trivy</h2>
<p><a href="https://github.com/aquasecurity/trivy">Trivy</a> is a scanner for vulnerabilities in container images, file systems, git repositories and configuration. It&rsquo;s an <a href="https://aquasec.com/">Aqua Security</a> open-source project that can be easily used to integrate with our existing CI CD pipeline or used as a stand-alone tool to scan container images deployed on the Kubernetes cluster.</p>
<p>We were using <a href="https://github.com/coreos/clair">Clair</a> previous to our switch to Trivy as we analyzed both the tools and found Trivy to be more helpful for the longer run - it was faster, had more CVE database updates as compared to Clair and didn&rsquo;t depend on external clients to interact/scan.</p>
<h2 id="usage">Usage</h2>
<p>For stand-alone usage, simply <a href="https://github.com/aquasecurity/trivy/releases">download the binary</a> on your Mac/Linux system and scan images or file systems or configuration as below</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># for scanning images</span>
</span></span><span style="display:flex;"><span>trivy image <span style="color:#f92672">[</span>image-name<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>trivy image alpine:latest
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for scanning file system</span>
</span></span><span style="display:flex;"><span>trivy fs --security-checks vuln,config <span style="color:#f92672">[</span>YOUR_PROJECT_DIR<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>trivy fs --security-checks vuln,config my_project/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># for scanning configuration</span>
</span></span><span style="display:flex;"><span>trivy config <span style="color:#f92672">[</span>YOUR_IAC_DIR<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>trivy config terraform/src
</span></span></code></pre></div><p>Trivy is a <a href="https://github.com/aquasecurity/trivy#features">feature-rich tool</a> and once you start using the same, you will recommend it to everyone who isn&rsquo;t using it due to its simplicity.</p>
<h2 id="use-case">Use-case</h2>
<p>We scan the images in our build CI pipeline, but once deployed on the Kubernetes cluster, we were trying to find a tool which would scan the deployed images, we found Trivy can be used as an alternative if you don&rsquo;t have run-time scanners like Palo Alto Twistlock Defender which does more than just scanning.</p>
<p>We were re-scanning the images from our registry, but only the ones which are already running on our cluster.</p>
<p>We get the list of images using the below <code>kubectl</code> API call and then iterate over those images to generate either HTML or JSON format reports as per the need.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># to get the list of images running on the cluster</span>
</span></span><span style="display:flex;"><span>kubectl get pods --all-namespaces -o jsonpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{.items[*].spec.containers[*].image}&#34;</span> |tr -s <span style="color:#e6db74">&#39;[[:space:]]&#39;</span> <span style="color:#e6db74">&#39;\n&#39;</span> |sort |uniq -c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># then we use the output list from the above command to iterate over each image to get the desired output</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to get only critical vulnerabilities on library layer</span>
</span></span><span style="display:flex;"><span>trivy image -s CRITICAL --vuln-type library --ignore-unfixed --format json -o my-app-1.4.3.json registry.mycompany.com/containers/my-app:1.4.3
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to get all vulnerabilities in HTML format</span>
</span></span><span style="display:flex;"><span>trivy image --format template <span style="color:#e6db74">&#34;@contrib/template.html&#34;</span> -o my-app-1.4.3.html registry.mycompany.com/containers/my-app:1.4.3
</span></span></code></pre></div>]]></content></item><item><title>Traefik on Kubernetes with Let's Encrypt &amp; Route53</title><link>https://rizwan-kh.github.io/posts/2021/07/traefik-on-kubernetes-with-lets-encrypt-route53/</link><pubDate>Wed, 28 Jul 2021 17:40:27 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2021/07/traefik-on-kubernetes-with-lets-encrypt-route53/</guid><description>Why Traefik? Traefik is a modern dynamic load balancer and reverse proxy, it&amp;rsquo;s easy to set up, and control and provides lots of options which sit right with our use cases. It integrates with Lets Encrypt to provide SSL termination along with support for service discovery, tracing, and metrics out of the box running on Kubernetes as a small pod.
Since when We have been using Traefik since early 2017 on 2 of our clusters as a daemonset Kubernetes object with external DNS to update the worker nodes IP with our DNS provider and used to manually generate and update Lets Encrypt certificate on a Kubernetes secret object.</description><content type="html"><![CDATA[<p><img src="/k8s-traefik-le-route53.svg" alt="k8s-traefik-le-route53"></p>
<h2 id="why-traefik">Why Traefik?</h2>
<p><a href="https://traefik.io/traefik/"><strong>Traefik</strong></a> is a modern dynamic load balancer and reverse proxy, it&rsquo;s easy to set up, and control and provides lots of options which sit right with our use cases. It integrates with Lets Encrypt to provide SSL termination along with support for service discovery, tracing, and metrics out of the box running on Kubernetes as a small pod.</p>
<h3 id="since-when">Since when</h3>
<p>We have been using Traefik since early 2017 on 2 of our clusters as a daemonset Kubernetes object with external DNS to update the worker nodes IP with our DNS provider and used to manually generate and update Lets Encrypt certificate on a Kubernetes secret object.</p>
<p>Later, with the release of Traefik proxy v2, we started deploying Traefik as a deployment Kubernetes object and have been using it since then on more than 10 clusters with auto Lets Encrypt certificate generation and we use a small custom init-container to update the Route53 DNS entry.</p>
<h2 id="how-is-the-entire-setup-done">How is the entire setup done</h2>
<p>It might feel a bit sketchy if you&rsquo;re doing this for the first time, but once set up - you&rsquo;re good to go for almost till you don&rsquo;t want to upgrade. üòâ</p>
<h3 id="pre-requisite">Pre-requisite</h3>
<ul>
<li>AWS IAM Keys with Route53 list and update access</li>
<li>AWS Route53 Public Hosted Zone</li>
<li>A working Kubernetes cluster</li>
</ul>
<h4 id="first-thing-first">First thing first</h4>
<p>Set up your Kubernetes cluster, doesn&rsquo;t matter if it&rsquo;s EKS, AKS, GKE, Custom kubeadm, RKE, K3S, KOPS, etc. Once the cluster is setup and ready; we would deploy the below Kubernetes manifest yaml (Now, Traefik support deployment via Helm), we use kustomize to deploy Traefik on each of our clusters from our GitLab CI CD pipeline (will not deep dive on that here, just will show you the manifest to start with)</p>
<h4 id="lets-start-with-traefik-deployment">Let&rsquo;s Start with Traefik Deployment</h4>
<p>Deploy the below traefik-crd-sa-cr-crb.yaml file with <code>kubectl apply -f traefik-crd-sa-cr-crb.yaml</code> as-is.</p>
<p><a href="https://doc.traefik.io/traefik/user-guides/crd-acme/#cluster-resources">The below CRD&rsquo;s and supporting manifest are taken from this Traefik official documentation</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># traefik-crd-sa-cr-crb.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ingressroutes.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">IngressRoute</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">ingressroutes</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">ingressroute</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">middlewares.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Middleware</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">middlewares</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">middleware</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ingressroutetcps.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">IngressRouteTCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">ingressroutetcps</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">ingressroutetcp</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ingressrouteudps.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">IngressRouteUDP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">ingressrouteudps</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">ingressrouteudp</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tlsoptions.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">TLSOption</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">tlsoptions</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">tlsoption</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tlsstores.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">TLSStore</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">tlsstores</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">tlsstore</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefikservices.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">TraefikService</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">traefikservices</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">traefikservice</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apiextensions.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">CustomResourceDefinition</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">serverstransports.traefik.containo.us</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">group</span>: <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">version</span>: <span style="color:#ae81ff">v1alpha1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">names</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServersTransport</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">plural</span>: <span style="color:#ae81ff">serverstransports</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">singular</span>: <span style="color:#ae81ff">serverstransport</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">scope</span>: <span style="color:#ae81ff">Namespaced</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">services</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">endpoints</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">secrets</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">get</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">list</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">watch</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">extensions</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">networking.k8s.io</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingresses</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingressclasses</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">get</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">list</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">watch</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">extensions</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingresses/status</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">update</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">traefik.containo.us</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">middlewares</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingressroutes</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">traefikservices</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingressroutetcps</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">ingressrouteudps</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">tlsoptions</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">tlsstores</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">serverstransports</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">get</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">list</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">watch</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1beta1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ClusterRole</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span></code></pre></div><p>Now save the below manifest and deploy it on your cluster with a few amendments like replacing proper values for AWS Route53 hosted zone and IAM keys, storageClassName, acme email address, and your sub-domain in the initContainer args section</p>
<p>‚ÑπÔ∏è - you can use the Instance profile/IAM Role as well if you don&rsquo;t want to use IAM keys</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># create PVC to store the Lets Encrypt cert to persist between Traefik restarts</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PersistentVolumeClaim</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-acme-storage-default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">accessModes</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">ReadWriteOnce</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">1Gi</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">storageClassName</span>: <span style="color:#ae81ff">gp2</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#75715e"># replace the below values for data with the proper encoded value (these are random garbage values üòù ) </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">data</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">access_key_id</span>: <span style="color:#ae81ff">S1FSMjI0NDRKNVNBSUtBRDRLTkgK  </span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">hosted_zone</span>: <span style="color:#ae81ff">WjM0RzY1QUVERURFCg==</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">region</span>: <span style="color:#ae81ff">dXMtZWFzdC0x</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">secret_key_id</span>: <span style="color:#ae81ff">SmszMmRUUUJWRlZTVVlCWVZESVVJRVZWSTZHVkhHMzJRVwo=</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Secret</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">type</span>: <span style="color:#ae81ff">Opaque</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create Traefik clusterIP service, note we won&#39;t be using the web as we avoid using port 80 for all Production purposes</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">web</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">admin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">websecure</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">port</span>: <span style="color:#ae81ff">4443</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">4443</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ClusterIP</span>
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Traefik deployment YAML, initContainers will be explained in detail below</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">selector</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">matchLabels</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">app</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">strategy</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">Recreate</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">template</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">labels</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">containers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">api.insecure</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">accesslog=true</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">entrypoints.websecure.Address=:4443</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">providers.kubernetescrd</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">providers.kubernetesingress</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">entrypoints.websecure.http.tls.options=default</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">entrypoints.websecure.http.tls.certResolver=default</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">certificatesresolvers.default.acme.dnschallenge.provider=route53</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">certificatesResolvers.default.acme.dnsChallenge.delayBeforeCheck=5</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">certificatesresolvers.default.acme.email=my.email@xzy.com</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">certificatesresolvers.default.acme.storage=/data/acme.json</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">metrics.prometheus=true</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">metrics.prometheus.entryPoint=metrics</span>
</span></span><span style="display:flex;"><span>        - --<span style="color:#ae81ff">serverstransport.insecureskipverify</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_ACCESS_KEY_ID</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">access_key_id</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_HOSTED_ZONE_ID</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">hosted_zone</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_REGION</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">region</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_SECRET_ACCESS_KEY</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">secret_key_id</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">traefik:v2.4</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">IfNotPresent</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ports</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">4443</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">hostPort</span>: <span style="color:#ae81ff">443</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">websecure</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">admin</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">protocol</span>: <span style="color:#ae81ff">TCP</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resources</span>: {}
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">terminationMessagePath</span>: <span style="color:#ae81ff">/dev/termination-log</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">terminationMessagePolicy</span>: <span style="color:#ae81ff">File</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/data</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-storage-volume</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dnsPolicy</span>: <span style="color:#ae81ff">ClusterFirst</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">initContainers</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#e6db74">&#39;apt-get install awscli -y;HOSTED_ZONE_ID=&#34;Z34G65AEDEDE&#34;;INPUT=&#34;{\&#34;ChangeBatch\&#34;: { \&#34;Comment\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          \&#34;Update the A record set\&#34;, \&#34;Changes\&#34;:[ {\&#34;Action\&#34;: \&#34;UPSERT\&#34;, \&#34;ResourceRecordSet\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { \&#34;Name\&#34;: \&#34;*.k8s.mydomain.com\&#34;, \&#34;Type\&#34;: \&#34;A\&#34;, \&#34;TTL\&#34;:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          300, \&#34;ResourceRecords\&#34;: [ { \&#34;Value\&#34;: \&#34;HOSTIP\&#34;}]}}]}}&#34;; HOSTIP=`curl
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          http://169.254.169.254/latest/meta-data/local-ipv4`;INPUT_JSON=`echo $INPUT
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          | sed &#34;s/HOSTIP/$HOSTIP/&#34;`; echo $INPUT_JSON;aws route53 change-resource-record-sets
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          --hosted-zone-id &#34;$HOSTED_ZONE_ID&#34; --cli-input-json &#34;$INPUT_JSON&#34;&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">/bin/sh</span>
</span></span><span style="display:flex;"><span>        - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_ACCESS_KEY_ID</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">access_key_id</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_REGION</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">region</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">AWS_SECRET_ACCESS_KEY</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">secret_key_id</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">envFrom</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">secretRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-secret</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">ubuntu:xenial    </span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">IfNotPresent</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">route53-changes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceAccount</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">traefik-ingress-controller</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cert-storage-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">claimName</span>: <span style="color:#ae81ff">traefik-acme-storage-default</span>
</span></span><span style="display:flex;"><span>----
</span></span></code></pre></div><p>The manifest is pretty straightforward, with the only non-standard part being the initContainer, which is used here to get the IP address of the worker node on which Trafik is deployed and to update it in AWS Route53 with an A record.</p>
<p>Assuming the IP address is 10.7.60.70, an entry with record *.k8s.mydomain.com with an A record pointing to IP 10.7.60.70 will get inserted in Route53 in your public hosted zone.</p>
<h4 id="is-this-even-working">Is this even working?</h4>
<p>Of course, if we have done all this, how do we validate, for that we will deploy a service and ingressRoute CRD with the manifest provided below</p>
<p><code>kubectl apply -f traefik-ir.yaml</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># traefik-ir.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">traefik.containo.us/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">IngressRoute</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">traefik-dashboard</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entryPoints</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">websecure</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">match</span>: <span style="color:#ae81ff">Host(`traefik.k8s.mydomain.com`) &amp;&amp; PathPrefix(`/`)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Rule</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">services</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">admin</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">port</span>: <span style="color:#ae81ff">8080</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tls</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">certResolver</span>: <span style="color:#ae81ff">default</span>
</span></span></code></pre></div><p>You should now be able to browse to this URL <a href="https://traefik.k8s.mydomain.com">https://traefik.k8s.mydomain.com</a> with proper Lets Encrypt TLS certificates and would see the Treafik dashboard.</p>
<p><img src="/traefik-dashboard.webp" alt="traefik-dashboard"></p>
<h3 id="final-thoughts">Final thoughts</h3>
<p>This blog may not do justice in explaining how this tool exactly works, however, I intended to get you a working traefik deployment with AWS Route53, and I guess that would help someone in need.</p>
]]></content></item><item><title>(Azure DevOps) Send Json Request(Parameters) to Azure Pipelines</title><link>https://rizwan-kh.github.io/posts/2021/06/azure-devops-send-json-requestparameters-to-azure-pipelines/</link><pubDate>Mon, 21 Jun 2021 11:16:23 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2021/06/azure-devops-send-json-requestparameters-to-azure-pipelines/</guid><description>Introduction If you&amp;rsquo;ve been using Azure DevOps, you would know that a pipeline can be triggered with runtime parameters in the format key: value pair and this is great for doing almost all of the tasks.
For our use case, we had been looking at an option to send a JSON-based parameter dictionary and I couldn&amp;rsquo;t find any way at the time of writing this article. We came up with a hack to achieve this and I would want to write it up in this blog post.</description><content type="html"><![CDATA[<p><img src="/azure-pipelines.png" alt="azure"></p>
<h3 id="introduction">Introduction</h3>
<p>If you&rsquo;ve been using Azure DevOps, you would know that a pipeline can be triggered with runtime parameters in the format <code>key: value</code> pair and this is great for doing almost all of the tasks.</p>
<p>For our use case, we had been looking at an option to send a JSON-based parameter dictionary and I couldn&rsquo;t find any way at the time of writing this article. We came up with a hack to achieve this and I would want to write it up in this blog post.</p>
<h3 id="flatten-json--operation">Flatten JSON &amp; operation</h3>
<p>We look at the option to use the Flatten JSON Objects extension to convert a nested data layer object into a new object with only one layer of key/value pairs. For this, we used the <strong>flatten_json</strong> library</p>
<p><code>pip install flatten_json</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">flatten the JSON data with a &#39;_&#39; separator; you can use different separators as well
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flatten.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> flatten_json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;a&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;b&#34;</span>: <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;c&#34;</span>: [{<span style="color:#e6db74">&#34;d&#34;</span>: [<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>], <span style="color:#e6db74">&#34;e&#34;</span>: [{<span style="color:#e6db74">&#34;f&#34;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;g&#34;</span>: <span style="color:#ae81ff">2</span>}]}]
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>flat_json <span style="color:#f92672">=</span> flatten_json<span style="color:#f92672">.</span>flatten(data,<span style="color:#e6db74">&#39;_&#39;</span>)
</span></span><span style="display:flex;"><span>print(flat_json)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">the above command gives us the below output, which is single layer of JSON
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;a&#39;: 1,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;b&#39;: 2,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;c_0_d_0&#39;: 2,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;c_0_d_1&#39;: 3,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;c_0_d_2&#39;: 4,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;c_0_e_0_f&#39;: 1,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;c_0_e_0_g&#39;: 2
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>Now that we had a single layer <code>key: value</code> pair, we added another hack to be able to read these variables properly in the Azure DevOps pipeline. We added a prefix (any prefix that&rsquo;s not part of your JSON) <strong>RizwanGotNoChill-</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>prefixed_flat_json <span style="color:#f92672">=</span> {<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;RizwanGotNoChill-</span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>: val <span style="color:#66d9ef">for</span> key, val <span style="color:#f92672">in</span> flat_json<span style="color:#f92672">.</span>items()}
</span></span><span style="display:flex;"><span>print(prefixed_flat_json)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">the above command gives us the below output, which is single layer prefixed JSON
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-a&#39;: 1,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-b&#39;: 2,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-c_0_d_0&#39;: 2,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-c_0_d_1&#39;: 3,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-c_0_d_2&#39;: 4,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-c_0_e_0_f&#39;: 1,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#39;RizwanGotNoChill-c_0_e_0_g&#39;: 2
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>This part is all we needed, now you could use the Azure DevOps Rest API with the above <code>key: value</code> pair to trigger any pipeline and I will show, how we interpreted these in the pipeline and crafted a JSON out.</p>
<h3 id="trigger-azure-devops-pipeline">Trigger Azure DevOps Pipeline</h3>
<p>I found the below two ways to trigger a pipeline, you may want to see which one fits your case -</p>
<ul>
<li>Using REST API-based curl/HTTP command calling the <strong>build API</strong> - <a href="https://dev.azure.com/YOURORG/YOURPROJECT/_apis/build/builds?api-version=6.1-preview.6">https://dev.azure.com/YOURORG/YOURPROJECT/_apis/build/builds?api-version=6.1-preview.6</a>)</li>
</ul>
<ol>
<li>Convert your JSON to an escaped one using this <a href="https://jsonformatter.org/json-escape">link</a></li>
<li>Create the request param as below and send</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Replace the values for YOURORG, YOURPROJECT, PATTOKEN and the value for id(pipeline ID)</span>
</span></span><span style="display:flex;"><span>curl --request POST <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --url <span style="color:#e6db74">&#39;https://dev.azure.com/YOURORG/YOURPROJECT/_apis/build/builds?api-version=6.1-preview.6&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --header <span style="color:#e6db74">&#39;Authorization: Basic PATTOKEN&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>  --header <span style="color:#e6db74">&#39;Content-Type: application/json&#39;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>
</span></span><span style="display:flex;"><span>  --data <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;parameters&#34;: &#34;{\&#34;RizwanGotNoChill-a\&#34;:1,\&#34;RizwanGotNoChill-b\&#34;:2,\&#34;RizwanGotNoChill-c_0_d_0\&#34;:2,\&#34;RizwanGotNoChill-c_0_d_1\&#34;:3,\&#34;RizwanGotNoChill-c_0_d_2\&#34;:4,\&#34;RizwanGotNoChill-c_0_e_0_f\&#34;:1,\&#34;RizwanGotNoChill-c_0_e_0_g\&#34;:2}&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;definition&#34;:  { &#34;id&#34;:  27 }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span></code></pre></div><ul>
<li>The other way to trigger a pipeline is by calling the <strong>RunPipeline API</strong>, I wrote a small program</li>
</ul>
<script type="application/javascript" src="https://gist.github.com/rizwan-kh/c08955a24bfc1eb3eaa48248acd012e0.js"></script>

<h3 id="unflatten-json--operation">Unflatten JSON &amp; operation</h3>
<p>Now the baton is at the Azure DevOps end to decode and re-configure this as a JSON, I used a simple job and Python script to achieve this</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># azure-pipeline.yml</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">job</span>: <span style="color:#ae81ff">install_library</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">checkout</span>: <span style="color:#ae81ff">none</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      pip3 install flatten_json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      pip3 freeze</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Install python library</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">job</span>: <span style="color:#ae81ff">generate_files</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">script</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;Here, we will grep the content based on the prefix and store in a file&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      env | grep RizwanGotNoChill &gt; request.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      sed -i &#39;s/RizwanGotNoChill-//&#39; request.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      echo &#34;utils.py first creates a dict based on request.txt and then unflattens the files and write to request.json&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      python3 utils.py
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      cat request.json | jq .</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">displayName</span>: <span style="color:#ae81ff">Produce JSON</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># utils.py</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> os<span style="color:#f92672">,</span> sys
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> flatten_json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>dict_from_file <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;request.txt&#34;</span>) <span style="color:#66d9ef">as</span> fp:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> fp:
</span></span><span style="display:flex;"><span>        (key, val) <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;=&#34;</span>)
</span></span><span style="display:flex;"><span>        dict_from_file[key<span style="color:#f92672">.</span>lower()] <span style="color:#f92672">=</span> val<span style="color:#f92672">.</span>rstrip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(dict_from_file)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>request_json <span style="color:#f92672">=</span> flatten_json<span style="color:#f92672">.</span>unflatten(dict_from_file, <span style="color:#e6db74">&#39;-&#39;</span>)
</span></span><span style="display:flex;"><span>print(request_json)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;request.json&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> fp:
</span></span><span style="display:flex;"><span>     fp<span style="color:#f92672">.</span>write(json<span style="color:#f92672">.</span>dumps(request_json))
</span></span></code></pre></div><p>Here, the <code>request.json</code> is a proper JSON file ready to be used by any application/program in the Azure Pipeline;
We noticed one issue though, the conversion process, converts all other data types to string datatype, so may be you would need to change that or add some logic to create json/dict with type-safe.</p>
]]></content></item><item><title>(Azure DevOps) Committing and Pushing to Azure Git Repository from Azure Pipeline</title><link>https://rizwan-kh.github.io/posts/2021/03/azure-devops-committing-and-pushing-to-azure-git-repository-from-azure-pipeline/</link><pubDate>Sun, 14 Mar 2021 00:28:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2021/03/azure-devops-committing-and-pushing-to-azure-git-repository-from-azure-pipeline/</guid><description>Azure Git Repository Workflow In a unique use-case scenario, we encountered the need to dynamically generate Terraform HCL files during Azure DevOps pipeline operations and subsequently commit and push these files back to Azure Git Repos. While this isn&amp;rsquo;t a conventional operation, we successfully achieved this using the pipeline configuration outlined below.
Assuming your pipeline has completed its tasks, including the generation or modification of files, the next step is to commit and push these changes to the Git repository.</description><content type="html"><![CDATA[<p><img src="/azure-pipelines.png" alt="azure"></p>
<h2 id="azure-git-repository-workflow">Azure Git Repository Workflow</h2>
<p>In a unique use-case scenario, we encountered the need to dynamically generate Terraform HCL files during Azure DevOps pipeline operations and subsequently commit and push these files back to Azure Git Repos. While this isn&rsquo;t a conventional operation, we successfully achieved this using the pipeline configuration outlined below.</p>
<p>Assuming your pipeline has completed its tasks, including the generation or modification of files, the next step is to commit and push these changes to the Git repository. This action will inevitably trigger another pipeline, with the second pipeline focused on deployment rather than the initial Terraform file generation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># get the branch name</span>
</span></span><span style="display:flex;"><span>GIT_BRANCH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>git branch -q<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># set your git global variables</span>
</span></span><span style="display:flex;"><span>git config --global user.email <span style="color:#e6db74">&#34;rizwan.khan@x-ops.com&#34;</span>
</span></span><span style="display:flex;"><span>git config --global user.name <span style="color:#e6db74">&#34;Rizwan Khan&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git add *.tf
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $? -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span> 
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Nothing to git add, maybe path error?&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git status
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># perform git commit with generic message</span>
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;[new generated env tf files via build] - commit via pipeline&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $? -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span> 
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Nothing to git commit, maybe path error?&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git config --get remote.origin.url
</span></span><span style="display:flex;"><span><span style="color:#75715e"># check if you&#39;re on the right branch</span>
</span></span><span style="display:flex;"><span>git branch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># push to the branch where you&#39;re working</span>
</span></span><span style="display:flex;"><span>git push --set-upstream origin HEAD:$GIT_BRANCH
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $? -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span> 
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Not able to push the changes, maybe another change was made in the repo?&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>git status
</span></span></code></pre></div><p>While the commands are self-explanatory, it&rsquo;s crucial to highlight the authentication aspect, which is facilitated through SSH keys stored in Azure Pipelines&rsquo; Variable Group. Additionally, you need to place your public SSH keys in your profile. For detailed authentication setup, refer to <a href="https://learn.microsoft.com/en-us/azure/devops/repos/git/use-ssh-keys-to-authenticate?view=azure-devops#set-up-ssh-key-authentication">Microsoft&rsquo;s guide on SSH key authentication</a>.</p>
]]></content></item><item><title>Docker Vulnerability Analysis</title><link>https://rizwan-kh.github.io/posts/2020/09/docker-vulnerability-analysis/</link><pubDate>Mon, 14 Sep 2020 17:20:44 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/09/docker-vulnerability-analysis/</guid><description>Introduction Docker, a powerful containerization platform, has revolutionized the way applications are developed, shipped, deployed and consumed. However, as with any technology, it&amp;rsquo;s crucial to address security considerations. Conducting vulnerability analysis on your Docker containers is an essential step in ensuring the integrity and security of your applications as well as environment.
Why Vulnerability Analysis? Containerized applications, while providing isolation, share the same kernel and may carry vulnerabilities. Regular vulnerability analysis helps identify and mitigate potential security risks within your Docker images.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Docker, a powerful containerization platform, has revolutionized the way applications are developed, shipped, deployed and consumed. However, as with any technology, it&rsquo;s crucial to address security considerations. Conducting vulnerability analysis on your Docker containers is an essential step in ensuring the integrity and security of your applications as well as environment.</p>
<h2 id="why-vulnerability-analysis">Why Vulnerability Analysis?</h2>
<p>Containerized applications, while providing isolation, share the same kernel and may carry vulnerabilities. Regular vulnerability analysis helps identify and mitigate potential security risks within your Docker images. This proactive approach is crucial in maintaining a robust security posture.</p>
<h2 id="tools-for-docker-vulnerability-analysis">Tools for Docker Vulnerability Analysis</h2>
<p>Several tools are available to assess and analyze vulnerabilities within Docker containers. Two widely used tools are:</p>
<ol>
<li>Clair</li>
</ol>
<ul>
<li>Overview:
<ul>
<li>An open-source project for the static analysis of vulnerabilities in application containers.</li>
</ul>
</li>
<li>Key Features:
<ul>
<li>Identifies vulnerabilities based on known data from various sources.</li>
<li>Integrates with container orchestration systems like Kubernetes.</li>
</ul>
</li>
</ul>
<ol start="2">
<li>Trivy</li>
</ol>
<ul>
<li>Overview:
<ul>
<li>A comprehensive and easy-to-use vulnerability scanner specifically designed for containers.</li>
</ul>
</li>
<li>Key Features:
<ul>
<li>Supports scanning both operating system packages and application dependencies.</li>
<li>Provides detailed vulnerability information.</li>
</ul>
</li>
</ul>
<ol start="3">
<li>Prisma Twistlock</li>
</ol>
<ul>
<li>Overview:
<ul>
<li>A paid tool which enables static as well as runtime vulnerability scanning and analysis.</li>
</ul>
</li>
<li>Key Features:
<ul>
<li>Identify and manage vulnerabilities in container images and monitor and protect containers during runtime, detecting and preventing anomalous activities.</li>
<li>Integrate with CI/CD pipelines, orchestration tools, and other components of the DevOps toolchain.</li>
</ul>
</li>
</ul>
<h2 id="performing-vulnerability-analysis">Performing Vulnerability Analysis</h2>
<p>Performing vulnerability analysis using tools like Clair or Trivy involves a few essential steps:</p>
<ol>
<li>Container Scanning:</li>
</ol>
<ul>
<li>Integrate the chosen tool into your CI/CD pipeline or run it manually on your Docker images.</li>
</ul>
<ol start="2">
<li>Scan Reports:</li>
</ol>
<ul>
<li>Review the generated scan reports to identify vulnerabilities and their severity levels.</li>
</ul>
<ol start="3">
<li>Mitigation:</li>
</ol>
<ul>
<li>Implement necessary fixes or updates to address identified vulnerabilities.</li>
</ul>
<ol start="4">
<li>Regular Scans:</li>
</ol>
<ul>
<li>Make vulnerability analysis a regular part of your development lifecycle to catch and mitigate new vulnerabilities promptly.</li>
</ul>
<h2 id="best-practices-for-secure-containers">Best Practices for Secure Containers</h2>
<p>In addition to using vulnerability analysis tools, adopting best practices for secure containerization is crucial. Some recommendations include:</p>
<ul>
<li>Regularly update base images to include the latest security patches.</li>
<li>Minimize the attack surface by only installing necessary dependencies.</li>
<li>Employ multi-stage builds to reduce the size of the final image.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Docker vulnerability analysis is an integral part of maintaining a secure containerized environment. By leveraging dedicated tools and following best practices, you can identify and address vulnerabilities, ensuring that your containerized applications remain resilient against potential security threats.</p>
]]></content></item><item><title>Hugo &amp; GitHub - Setup Static Website on GitHub</title><link>https://rizwan-kh.github.io/posts/2020/06/hugo-github-setup-static-website-on-github/</link><pubDate>Fri, 12 Jun 2020 22:32:01 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/06/hugo-github-setup-static-website-on-github/</guid><description>Hugo and Github Account A small write-up on how this site was setup. There are plenty of materials available all over the internet, but this is more of a self-help document for myself to refer back in future to understand how this was all setup.
Hugo can be downloaded from their official release page A GitHub account needs to be created from this link and a public repo is required to be setup here After installing Hugo, to generate a new site, run the below command:</description><content type="html"><![CDATA[<p><img src="/hugo-logo-wide.svg" alt="Hub"></p>
<h2 id="hugo-and-github-account">Hugo and Github Account</h2>
<p>A small write-up on how <a href="https://rizwan-kh.github.io">this site</a> was setup. There are plenty of materials available all over the internet, but this is more of a self-help document for myself to refer back in future to understand how this was all setup.</p>
<ul>
<li>Hugo can be downloaded from their official <a href="https://github.com/gohugoio/hugo/releases">release page</a></li>
<li>A GitHub account needs to be created from <a href="https://github.com/join">this link</a> and a public repo is required to be setup <a href="https://github.com/new">here</a></li>
</ul>
<p>After installing <strong>Hugo</strong>, to generate a new site, run the below command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hugo new site rizwan-blogs
</span></span></code></pre></div><p>This will automatically create a directory named <em>rizwan-blogs</em> which will contain the necessary sub-directories and files required for our new hugo-based static website.</p>
<p>The <code>config.toml</code> file is the main configuration file where we can add/change the theme or add additional settings like title, author, etc. Sample <strong>config.toml</strong> looks like below</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>baseURL <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://rizwan-kh.github.io&#34;</span>
</span></span><span style="display:flex;"><span>title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Rizwan Khanüë®üèª‚Äçüíª&#34;</span>
</span></span><span style="display:flex;"><span>languageCode <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en-us&#34;</span>
</span></span><span style="display:flex;"><span>theme <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello-friend-ng&#34;</span>
</span></span></code></pre></div><p>Replace the above 4 values as you want to in the config.toml and you are good to go.</p>
<p>To add content/pages, we run the below command, this will create a markdown page with the post marked as <code>draft: true</code> and we can keep it as true until we want to publish the post.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>huge new posts/my-post.md
</span></span></code></pre></div><p>Fire up your favorite editor and it&rsquo;s all <a href="https://www.markdownguide.org/cheat-sheet/">markdown</a> from there.
Then we can start the hugo server in build drafts enabled mode (or as I think of it as development mode) with the below command and it will let you browse the site on address <a href="http://localhost:1313/">localhost:1313</a> with auto-refresh mode on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><p>When the pages/posts are ready to be published, simply run the server in publish mode and hugo will take care of generating the required files in <code>./public</code> directory,
<em>Note: Make sure to clean up the public directory, as the directory will contain drafts pages as well from the previous run</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>hugo
</span></span></code></pre></div><h4 id="deploy-your-website">Deploy your website</h4>
<p>The final production content in stored in the public directory and we just need to copy the directory in the production server either on <strong>AWS S3</strong>, or on <strong>GitHub Pages</strong></p>
<hr>
<p>Now for the publishing the website, Go to <a href="https://github.com">GitHub</a> and create a <a href="https://github.com/new">new public repository</a> named <em><strong>username.github.io</strong></em>, where <em><strong>username</strong></em> is your username (or organization name) on GitHub.</p>
<p>Use any <strong>git</strong> client to clone the repo, copy over the entire <em>public</em> directory</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git clone https://github.com/username/username.github.io
</span></span><span style="display:flex;"><span>cd username.github.io
</span></span></code></pre></div><p>copy over the entire content of the <code>public</code> directory <code>username.github.io</code> and use git to commit and push the content over to <em>GitHub</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>git add --all
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;initial commit&#34;</span>
</span></span><span style="display:flex;"><span>git push origin main
</span></span></code></pre></div><p>open your browser and type up the URL <a href="https://username.github.io">username.github.io</a> and voila your static website content is up and ready for free.</p>
]]></content></item><item><title>Klar</title><link>https://rizwan-kh.github.io/posts/2020/03/klar/</link><pubDate>Sat, 14 Mar 2020 17:20:26 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/03/klar/</guid><description>Introduction Klar is a static binary tool to analyze images stored in a private or public Docker registry for security vulnerabilities using Clair. Klar is designed to be used as an integration tool so it relies on environment variables. It&amp;rsquo;s a single binary which requires no dependencies and can be plugged and/or integrated into our CI CD pipelines.
Klar serves as a client which coordinates the image checks between the Docker registry and Clair.</description><content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p><a href="https://github.com/optiopay/klar">Klar</a> is a static binary tool to analyze images stored in a private or public Docker registry for security vulnerabilities using <a href="https://github.com/coreos/clair">Clair</a>. Klar is designed to be used as an integration tool so it relies on environment variables. It&rsquo;s a single binary which requires no dependencies and can be plugged and/or integrated into our CI CD pipelines.</p>
<p>Klar serves as a client which coordinates the image checks between the Docker registry and Clair. We heavily use klar along with Clair in our internal CI CD pipeline to scan the newly built Docker images.</p>
<hr>
<h4 id="installation">Installation</h4>
<p>Download the latest release (for OSX and Linux) from <a href="https://github.com/optiopay/klar/releases/">https://github.com/optiopay/klar/releases/</a> and put the binary in a directory which is present in your PATH variable (make sure it has execute permission set).</p>
<hr>
<h4 id="usage">Usage</h4>
<p>Klar process returns 0 if the number of detected high-severity vulnerabilities in an image is less than or equal to a threshold (see below) and 1 if there were more. It will return 2 if an error has prevented the image from being analyzed.</p>
<p>Klar can be configured via the following environment variables:</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>CLAIR_ADDR</strong></td>
<td>address of Clair server. It has a form of protocol://host:port - protocol and port default to http and 6060 respectively and may be omitted. You can also specify basic authentication in the URL: protocol://login:password@host:port</td>
</tr>
<tr>
<td><strong>CLAIR_OUTPUT</strong></td>
<td>severity level threshold, vulnerabilities with severity level higher than or equal to this threshold will be outputted. Supported levels are Unknown, Negligible, Low, Medium, High, Critical, Defcon1. Default is Unknown</td>
</tr>
<tr>
<td><strong>CLAIR_THRESHOLD</strong></td>
<td>how many outputted vulnerabilities Klar can tolerate before returning 1. Default is 0</td>
</tr>
<tr>
<td><strong>CLAIR_TIMEOUT</strong></td>
<td>timeout in minutes before Klar cancels the image scanning. Default is 1</td>
</tr>
<tr>
<td><strong>DOCKER_USER</strong></td>
<td>Docker registry account name</td>
</tr>
<tr>
<td><strong>DOCKER_PASSWORD</strong></td>
<td>Docker registry account password</td>
</tr>
<tr>
<td><strong>DOCKER_TOKEN</strong></td>
<td>Docker registry account token. (Can be used in place of DOCKER_USER and DOCKER_PASSWORD)</td>
</tr>
<tr>
<td><strong>DOCKER_INSECURE</strong></td>
<td>Allow Klar to access registries with bad SSL certificates. Default is false. Clair will need to be booted with -insecure-tls for this to work</td>
</tr>
<tr>
<td><strong>DOCKER_TIMEOUT</strong></td>
<td>timeout in minutes when trying to fetch layers from a docker registry</td>
</tr>
<tr>
<td><strong>DOCKER_PLATFORM_OS</strong></td>
<td>The operating system of the Docker image. Default is linux. This only needs to be set if the image specified references a Docker ManifestList instead of a usual manifest</td>
</tr>
<tr>
<td><strong>DOCKER_PLATFORM_ARCH</strong></td>
<td>The architecture the Docker image is optimized for. Default is amd64. This only needs to be set if the image specified references a Docker ManifestList instead of a usual manifest</td>
</tr>
<tr>
<td><strong>REGISTRY_INSECURE</strong></td>
<td>Allow Klar to access insecure registries (HTTP only). Default is false</td>
</tr>
<tr>
<td><strong>JSON_OUTPUT</strong></td>
<td>Output JSON, not plain text. Default is false</td>
</tr>
<tr>
<td><strong>FORMAT_OUTPUT</strong></td>
<td>Output format of the vulnerabilities. Supported formats are standard, json, table. Default is standard. If JSON_OUTPUT is set to true, this option is ignored</td>
</tr>
<tr>
<td><strong>WHITELIST_FILE</strong></td>
<td>Path to the YAML file with the CVE whitelist. Look at whitelist-example.yaml for the file format</td>
</tr>
<tr>
<td><strong>IGNORE_UNFIXED</strong></td>
<td>Do not count vulnerabilities without a fix towards the threshold</td>
</tr>
</tbody>
</table>
<h4 id="usage-1">Usage:</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>CLAIR_ADDR<span style="color:#f92672">=</span>localhost;CLAIR_OUTPUT<span style="color:#f92672">=</span>High;CLAIR_THRESHOLD<span style="color:#f92672">=</span>10;DOCKER_USER<span style="color:#f92672">=</span>docker;DOCKER_PASSWORD<span style="color:#f92672">=</span>secret;
</span></span><span style="display:flex;"><span>klar mysql:latest
</span></span></code></pre></div><h5 id="debug-output">Debug Output</h5>
<p>You can enable more verbose output by setting KLAR_TRACE to true.</p>
<h2 id="run-export-klar_tracetrue-to-persist-between-runs">run <code>export KLAR_TRACE=true</code> to persist between runs.</h2>
<h4 id="gitlab-ci-usage">GitLab CI Usage</h4>
<p>We have the below job defined in <code>.gitlab-ci.yml</code> post Dockerbuild stage</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">image_analysis</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">analyse</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#ae81ff">registry.mycompany.com/ci/kubernetes-deploy:klar</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">export PATH=$PATH:$CI_PROJECT_DIR</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">export TAG=&#34;$CI_BUILD_REF_NAME&#34;</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">CLAIR_THRESHOLD=1000 DOCKER_TIMEOUT=5 CLAIR_TIMEOUT=5 CLAIR_ADDR=https://ngclair.mycompany.com:443 DOCKER_USER=gitlab-ci-token DOCKER_PASSWORD=$CI_BUILD_TOKEN klar $CI_REGISTRY_IMAGE:$TAG | tee scan.txt</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#ae81ff">$CI_PROJECT_DIR/scan.txt</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">expire_in</span>: <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">hour</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">my_runner</span>
</span></span></code></pre></div><p>This image <code>registry.mycompany.com/ci/kubernetes-deploy:klar</code> contains the klar binary and the clair server is running on <a href="https://ngclair.mycompany.com:443">https://ngclair.mycompany.com:443</a></p>
]]></content></item><item><title>Vagrant</title><link>https://rizwan-kh.github.io/posts/2020/03/vagrant/</link><pubDate>Sat, 14 Mar 2020 17:20:26 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/03/vagrant/</guid><description>Introduction Getting started with Vagrant Download the install the Vagrant from the Download section
vagrant version Installed Version: 2.2.10 Latest Version: 2.2.10 You&amp;#39;re running an up-to-date version of Vagrant! Download and install VirtualBox
Now if both Vagrant and VirtualBox are up and running, all we need to do is run the below 3 commands to have a Ubuntu VM up and available for our use in no time.
vagrant init hashicorp/bionic64 vagrant up vagrant ssh This is a pretty simple way to spin up a new Ubuntu VM, we can do a lot more which I will try to write up in later posts.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<hr>
<h2 id="getting-started-with-vagrant">Getting started with Vagrant</h2>
<p>Download the install the <a href="https://www.vagrantup.com/downloads">Vagrant</a> from the Download section</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vagrant version
</span></span><span style="display:flex;"><span>Installed Version: 2.2.10
</span></span><span style="display:flex;"><span>Latest Version: 2.2.10
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>You<span style="color:#960050;background-color:#1e0010">&#39;</span>re running an up-to-date version of Vagrant!
</span></span></code></pre></div><p>Download and install <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></p>
<p>Now if both <strong>Vagrant</strong> and <strong>VirtualBox</strong> are up and running, all we need to do is run the below 3 commands to have a Ubuntu VM up and available for our use in no time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vagrant init hashicorp/bionic64
</span></span><span style="display:flex;"><span>vagrant up
</span></span><span style="display:flex;"><span>vagrant ssh
</span></span></code></pre></div><p>This is a pretty simple way to spin up a new Ubuntu VM, we can do a lot more which I will try to write up in later posts.</p>
]]></content></item><item><title>Gitlab CI &amp; Kaniko to build Docker Images</title><link>https://rizwan-kh.github.io/posts/2020/02/gitlab-ci-kaniko-to-build-docker-images/</link><pubDate>Wed, 12 Feb 2020 12:11:00 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/02/gitlab-ci-kaniko-to-build-docker-images/</guid><description>Introduction You can build container images from a Dockerfile inside a container or a Kubernetes cluster, though J√©r√¥me Petazzoni strongly discourages doing so. He wrote a detailed blog that can be read here on why not to build container images using Dockerfile inside a container or a Kubernetes cluster.
Context You will get N number of blogs on how to use the CI/CD of GitLab; here we will see an easy reference point to extend a file and create CI/CD for Docker Image to be built and stored in the same GitLab registry using kaniko.</description><content type="html"><![CDATA[<p><img src="/gitlab.jpeg" alt="GitLab"></p>
<h3 id="introduction">Introduction</h3>
<p>You can build container images from a Dockerfile inside a container or a Kubernetes cluster, though <em>J√©r√¥me Petazzoni</em> strongly discourages doing so. He wrote a detailed blog that can be read <a href="http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">here</a> on why not to build container images using Dockerfile inside a container or a Kubernetes cluster.</p>
<hr>
<h4 id="context">Context</h4>
<p>You will get <code>N</code> number of blogs on how to use the CI/CD of GitLab; here we will see an easy reference point to extend a file and create CI/CD for Docker Image to be built and stored in the same GitLab registry using <a href="https://cloud.google.com/blog/products/gcp/introducing-kaniko-build-container-images-in-kubernetes-and-google-container-builder-even-without-root-access">kaniko</a>. This file needs to be created in the individual project in the GitLab using the template available with the name .gitlab-ci.yml.</p>
<hr>
<h4 id="what-is-kaniko">What is Kaniko?</h4>
<p><code>Note: Kaniko is not an officially supported Google product</code>
It is a tool to build container images from a Dockerfile inside a container or a Kubernetes cluster. It doesn&rsquo;t depend on the Docker daemon to run each Dockerfile command.</p>
<p>It comes with it&rsquo;s limitations, but we don&rsquo;t run the risk of using Docker-in-Docker</p>
<hr>
<h4 id="prerequisites">Prerequisites</h4>
<ul>
<li>Access to GitLab (either private self-hosted or managed)</li>
<li>GitLab project with a Dockerfile</li>
</ul>
<hr>
<h4 id="ci-yaml-for-auto-devops">CI YAML for auto-devops</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#75715e"># .gitlab-ci.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">variables</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">GIT_SSL_NO_VERIFY</span>: <span style="color:#e6db74">&#34;true&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">before_script</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">echo &#34;Random image creation, user = $GITLABUSER&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">stages</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">build_image</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gcr.io/kaniko-project/executor:debug</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">entrypoint</span>: [<span style="color:#e6db74">&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">stage</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">ls</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">pwd</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">export CI_REGISTRY_IMAGE=mygitlab.com/base-project/subproject/project</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">echo &#34;{\&#34;auths\&#34;:{\&#34;mygitlab.com\&#34;:{\&#34;username\&#34;:\&#34;gitlab-ci-token\&#34;,\&#34;password\&#34;:\&#34;$CI_BUILD_TOKEN\&#34;},\&#34;repository.xyz-company.io\&#34;:{\&#34;username\&#34;:\&#34;user\&#34;,\&#34;password\&#34;:\&#34;123random\&#34;}}}&#34; &gt; /kaniko/.docker/config.json</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">wget https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | xargs cat lets-encrypt-x3-cross-signed.pem &gt;&gt; /kaniko/ssl/certs/ca-certificates.crt</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#ae81ff">/kaniko/executor --skip-tls-verify --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME</span>
</span></span></code></pre></div><hr>
<p><strong>variables</strong>: These are static values which aren&rsquo;t going to change and is used at multiple locations in the gitlab-ci.yml file</p>
<p><strong>before_script</strong>: Set(s) of commands or echo statements we want to print</p>
<p><strong>stages</strong>: Stages are a block of code for an identical job or set of jobs viz. build, test, clean-up, delete, deploy, etc. This executes in the order it&rsquo;s defined in the YAML. A dot(.) in front of any job(block of code) disables it and it won&rsquo;t be executed or available either as an automatic or manual job.</p>
<p><strong>Jobs (Each block of code)</strong>: Each block of an individual stage contains a key-value pair or set of commands to it. We can define each block of code to point to a particular stage and all the set of commands it requires to perform that function in the script block. It can be made to run automatically and also manually (start the job manually by clicking a button). The variables like password and access/secret key can be defined in the CI/CD settings under the secret variables section so it&rsquo;s not available in plain text format.</p>
<hr>
<p><strong>Note</strong>: If you want to use the GitLab docker registry and store docker images in the GitLab project; this by default is disabled and needs to be enabled in the General setting section.</p>
]]></content></item><item><title>How to use service accounts for Kubernetes imagePullSecrets</title><link>https://rizwan-kh.github.io/posts/2020/01/how-to-use-service-accounts-for-kubernetes-imagepullsecrets/</link><pubDate>Thu, 02 Jan 2020 17:40:27 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2020/01/how-to-use-service-accounts-for-kubernetes-imagepullsecrets/</guid><description>What are Service Accounts in Kubernetes? As per Kubernetes.io - A service account provides an identity for processes that run in a Pod.
One can think of service accounts as service users for pods. They help pods authenticate with the api-server and interact with it.
Many times, we come across a situation where our organization uses a private Docker registry to store the Docker images and to make this available we need to create a docker-registry kubernetes secret and pass as imagePullSecrets in the deployment manifest.</description><content type="html"><![CDATA[<p><img src="/kubernetes.jpg" alt="Kubernetes"></p>
<h2 id="what-are-service-accounts-in-kubernetes">What are Service Accounts in Kubernetes?</h2>
<p>As per <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Kubernetes.io</a> - A service account provides an identity for processes that run in a Pod.</p>
<p>One can think of service accounts as service users for pods. They help pods authenticate with the api-server and interact with it.</p>
<h2 id="heading"></h2>
<p>Many times, we come across a situation where our organization uses a private Docker registry to store the Docker images and to make this available we need to create a <code>docker-registry</code> kubernetes secret and pass as <code>imagePullSecrets</code> in the deployment manifest.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl create secret docker-registry registry-cred <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --docker-server<span style="color:#f92672">=</span>my.private-registry.com <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --docker-username<span style="color:#f92672">=</span>my_username <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --docker-password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;my_superr_strong_password&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span> --docker-email<span style="color:#f92672">=</span>my.email@mycompany.com -n my-namespace
</span></span></code></pre></div><p>Then, we pass this secret in the deployment manifest as below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">imagePullSecrets</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">registry-cred</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="the-problem-with-this-approach">The problem with this approach?</h2>
<p>Not many that I can think of, except the below ones:</p>
<ul>
<li>The deployment yaml is generally developed by Developers who don&rsquo;t need to know about these credentials</li>
<li>If there are a large number of pods in the namespace, then each manifest needs to be updated, whenever the password is rotated</li>
</ul>
<h2 id="the-solution">The solution</h2>
<p><code>serviceAccounts</code> - your Kubernetes administrator can just patch serviceAccounts with the registry credential secret and you don&rsquo;t need to worry about replacing or adding it in your manifest yaml each time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl patch serviceaccount default <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>-p <span style="color:#e6db74">&#39;{&#34;imagePullSecrets&#34;: [{&#34;name&#34;: &#34;registry-cred&#34;}]}&#39;</span> -n my-namespace
</span></span></code></pre></div>]]></content></item><item><title>Docker Cheat Sheet</title><link>https://rizwan-kh.github.io/posts/2019/10/docker-cheat-sheet/</link><pubDate>Fri, 11 Oct 2019 05:11:13 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2019/10/docker-cheat-sheet/</guid><description>Below are a few of the main and basic commands used in Docker, an easy pick-up and good-to-go command page for docker troubleshooting.
Alias If you are a lazy developer/sysadmin like me, the first thing you should do on your system is to make easy alias of all the long commands, below are the ones I often use on any system I use daily:
These can be imported on ~/.</description><content type="html"><![CDATA[<p><img src="/docker.png" alt="docker">
Below are a few of the main and basic commands used in Docker, an easy pick-up and good-to-go command page for docker troubleshooting.</p>
<h2 id="alias">Alias</h2>
<hr>
<p>If you are a lazy developer/sysadmin like me, the first thing you should do on your system is to make easy alias of all the long commands, below are the ones I often use on any system I use daily:</p>
<p>These can be imported on ~/.bashrc (if you use bash) or ~/.zshrc (if you are a MAC user and use ZSH)</p>
<script type="application/javascript" src="https://gist.github.com/rizwan-kh/032e587751e54a2fd26f44c0267ea5c5.js"></script>

<h3 id="commands-and-their-usage">Commands and their usage</h3>
<p>Mostly used commands are aliased above, but to explain what each does, please read on</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e"># to build a docker image with a certain name and certain tag, use the below Docker build command</span>
</span></span><span style="display:flex;"><span>docker build --tag imagename:tagname --file /path/to/Dockerfile
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to check the docker images</span>
</span></span><span style="display:flex;"><span>docker images
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to run a docker container in detach mode publishing hostport:containerport and mounting a host vol to container vol, giving a name to the runnging container and the hostname to container</span>
</span></span><span style="display:flex;"><span>docker run --tty --interactive --publish 2222:22 --hostname my-x-host --volume /hostvolume:/containervol --name name-of-running-container --detach imagename:tagname
</span></span><span style="display:flex;"><span><span style="color:#75715e"># docker run -ti -p 2222:22 -h my-x-host -v /hostvolume:/containervol -n name-of-running-container -d imagename:tagname (this is shorter version of the above command)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to see all running containers</span>
</span></span><span style="display:flex;"><span>docker ps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to see all containers (running, stopped, exited, etc.)</span>
</span></span><span style="display:flex;"><span>docker ps -a
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to get inside a running container</span>
</span></span><span style="display:flex;"><span>docker exec -ti CONTAINERNAME/CONTAINERID bash
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to stop a running container</span>
</span></span><span style="display:flex;"><span>docker stop CONTAINERNAME/CONTAINERID
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to remove a stopped container</span>
</span></span><span style="display:flex;"><span>docker rm CONTAINERNAME/CONTAINERID
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># to see logs from containers</span>
</span></span><span style="display:flex;"><span>docker logs CONTAINERNAME/CONTAINERID
</span></span></code></pre></div>]]></content></item><item><title>tmux</title><link>https://rizwan-kh.github.io/posts/2019/06/tmux/</link><pubDate>Thu, 13 Jun 2019 21:53:35 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2019/06/tmux/</guid><description>tmux - Terminal Multiplexer tmux is a terminal multiplexer. It helps switch between multiple programs in one terminal, detach them(they keep running in the background) and reattach them when needed. I started using tmux as someone recommended me to start using it as it helps with CKA &amp;amp; CKAD (which I have still not attempted) and then later on I was heavily using it for my website(with Hugo). I had previously used mPutty, but mPutty uses multiple logged-in sessions to display on the screen, whereas tmux simply multiplies the existing sessions on screen.</description><content type="html"><![CDATA[<p><img src="/tmux-logo.png" alt="tmux"></p>
<h1 id="tmux---terminal-multiplexer">tmux - Terminal Multiplexer</h1>
<p>tmux is a terminal multiplexer. It helps switch between multiple programs in one terminal, detach them(they keep running in the background) and reattach them when needed. I started using tmux as someone recommended me to start using it as it helps with CKA &amp; CKAD (which I  have still not attempted) and then later on I was heavily using it for my website(with Hugo). I had previously used mPutty, but mPutty uses multiple logged-in sessions to display on the screen, whereas tmux simply multiplies the existing sessions on screen.</p>
<h3 id="installation">Installation</h3>
<p>Major distribution of Linux provides tmux packages via standard pre-built packages of tmux.</p>
<table>
<thead>
<tr>
<th>Platform</th>
<th>Install Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>Debian or Ubuntu</td>
<td><code>apt install tmux</code></td>
</tr>
<tr>
<td>RHEL or CentOS</td>
<td><code>yum install tmux</code></td>
</tr>
<tr>
<td>macOS (using Homebrew)</td>
<td><code>brew install tmux</code></td>
</tr>
</tbody>
</table>
<h3 id="basic-commands-and-usage">Basic commands and usage</h3>
<table>
<thead>
<tr>
<th style="text-align:left">Command</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tmux</td>
<td style="text-align:left">start a new session</td>
</tr>
<tr>
<td style="text-align:left">tmux new -s my-kube-session</td>
<td style="text-align:left">start a new session with name</td>
</tr>
<tr>
<td style="text-align:left">tmux a</td>
<td style="text-align:left">attach</td>
</tr>
<tr>
<td style="text-align:left">tmux a  -t my-kube-session</td>
<td style="text-align:left">attach to a named session</td>
</tr>
<tr>
<td style="text-align:left">tmux ls</td>
<td style="text-align:left">list all tmux sessions</td>
</tr>
<tr>
<td style="text-align:left">tmux kill-session -t my-kube-session</td>
<td style="text-align:left">kill the session named my-kube-session</td>
</tr>
</tbody>
</table>
<p>After a session is created, inside to perform any action, we need to hit <code>ctrl+b</code> followed by any below command/keystroke</p>
<table>
<thead>
<tr>
<th style="text-align:left">Keystroke</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ctrl+b -&gt; c</td>
<td style="text-align:left">create new shell</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; n</td>
<td style="text-align:left">next shell</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; p</td>
<td style="text-align:left">previous shell</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; d</td>
<td style="text-align:left">detach session</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; %</td>
<td style="text-align:left">vertical split</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; &quot;</td>
<td style="text-align:left">horizontal split</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; [arrow keys]</td>
<td style="text-align:left">to switch between the vertical/horizontal panes</td>
</tr>
<tr>
<td style="text-align:left">ctrl+b -&gt; z</td>
<td style="text-align:left">zoom in and zoom out between split panes</td>
</tr>
</tbody>
</table>
<p>That&rsquo;s all more or less the keystroke you need to know; It comes off naturally when you start using it after a few days but until then - you can refer to these as needed.</p>
]]></content></item><item><title>(Linux) Debug Shell Scripts</title><link>https://rizwan-kh.github.io/posts/2018/05/linux-debug-shell-scripts/</link><pubDate>Tue, 01 May 2018 12:30:00 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2018/05/linux-debug-shell-scripts/</guid><description>Debug Shell Scripts In my experience, people when they want to debug a shell script, they usually use the set +xv and all this does is print each operation on the console output.
I found a better way to debug the shell script, which is consistent with going over each line on the press of the enter key
Simply add the below line in front of the place from where you want to start the debug</description><content type="html"><![CDATA[<h1 id="debug-shell-scripts">Debug Shell Scripts</h1>
<p>In my experience, people when they want to debug a shell script, they usually use the <code>set +xv</code> and all this does is print each operation on the console output.</p>
<p>I found a better way to debug the shell script, which is consistent with going over each line on the press of the enter key</p>
<p>Simply add the below line in front of the place from where you want to start the debug</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>trap <span style="color:#e6db74">&#39;(read -p &#34;[$BASH_SOURCE:$LINENO] $BASH_COMMAND&#34;)&#39;</span> DEBUG
</span></span></code></pre></div><p>This command sets a <code>trap</code> for the <code>DEBUG</code> signal, which pauses the script and prompts you with the current source file, line number, and command being executed. You can press Enter to proceed to the next line.</p>
<h2 id="example-usage">Example Usage</h2>
<ol>
<li>Insert the <code>trap</code> command at the desired location in your script:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Starting script...&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>trap <span style="color:#e6db74">&#39;(read -p &#34;[$BASH_SOURCE:$LINENO] $BASH_COMMAND&#34;)&#39;</span> DEBUG
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Your script code here</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;This is a test line.&#34;</span>
</span></span><span style="display:flex;"><span>var<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#66d9ef">$((</span>var+2<span style="color:#66d9ef">))</span>
</span></span></code></pre></div><ol start="2">
<li>Run your script as usual. The script will pause at each line where the <code>trap</code> command is active, allowing you to inspect the execution flow interactively.</li>
</ol>
<h2 id="summary">Summary</h2>
<ul>
<li>Debugging Method: Use <code>trap '(read -p &quot;[$BASH_SOURCE:$LINENO] $BASH_COMMAND&quot;)' DEBUG</code> to pause and inspect script execution line-by-line.</li>
</ul>
<p>This approach offers a more interactive way to debug shell scripts compared to traditional methods, giving you better control over script execution.</p>
]]></content></item><item><title>(Linux) Extract Public Key &amp; Fingerprint from Private</title><link>https://rizwan-kh.github.io/posts/2018/03/linux-extract-public-key-fingerprint-from-private/</link><pubDate>Thu, 15 Mar 2018 00:28:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2018/03/linux-extract-public-key-fingerprint-from-private/</guid><description>Extract Public Key and Fingerprint from Private Key When managing SSH keys, you may need to extract the public key or obtain the fingerprint of a private key. Below are the commands to accomplish these tasks.
Get the Public Key To extract the public key from a private key file, use the following command:
ssh-keygen -f keyname -y Replace keyname with the path to your private key file.
Get the Fingerprint SHA-1 Fingerprint Convert the private key to DER format and compute the SHA-1 fingerprint:</description><content type="html"><![CDATA[<h1 id="extract-public-key-and-fingerprint-from-private-key">Extract Public Key and Fingerprint from Private Key</h1>
<p>When managing SSH keys, you may need to extract the public key or obtain the fingerprint of a private key. Below are the commands to accomplish these tasks.</p>
<h2 id="get-the-public-key">Get the Public Key</h2>
<p>To extract the public key from a private key file, use the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>ssh-keygen -f keyname -y
</span></span></code></pre></div><p>Replace <code>keyname</code> with the path to your private key file.</p>
<h2 id="get-the-fingerprint">Get the Fingerprint</h2>
<h3 id="sha-1-fingerprint">SHA-1 Fingerprint</h3>
<p>Convert the private key to DER format and compute the SHA-1 fingerprint:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>openssl pkcs8 -in path_to_private_key -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c
</span></span></code></pre></div><h3 id="md5-fingerprint">MD5 Fingerprint</h3>
<p>Extract the public key in DER format and compute the MD5 fingerprint:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>openssl rsa -in path_to_private_key -pubout -outform DER | openssl md5 -c
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<ul>
<li>Public Key: <code>ssh-keygen -f keyname -y</code></li>
<li>SHA-1 Fingerprint: <code>openssl pkcs8 -in path_to_private_key -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c</code></li>
<li>MD5 Fingerprint: <code>openssl rsa -in path_to_private_key -pubout -outform DER | openssl md5 -c</code></li>
</ul>
<p>These commands help you extract the public key and obtain the fingerprints for verification purposes.</p>
]]></content></item><item><title>(Linux) Remove systemd process</title><link>https://rizwan-kh.github.io/posts/2018/03/linux-remove-systemd-process/</link><pubDate>Thu, 15 Mar 2018 00:28:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2018/03/linux-remove-systemd-process/</guid><description>Removing a systemd process from your Linux machine The below steps are to be performed to remove a systemd process
View the service unit file systemctl cat [servicename] Stop and disable the service systemctl stop [servicename] systemctl disable [servicename] Remove the service file rm /etc/systemd/system/[servicename] rm /etc/systemd/system/[servicename] #symlinks that might be related Reload systemd configuration systemctl daemon-reload Reset the failed systemd service systemctl reset-failed</description><content type="html"><![CDATA[<h1 id="removing-a-systemd-process-from-your-linux-machine">Removing a systemd process from your Linux machine</h1>
<p>The below steps are to be performed to remove a systemd process</p>
<h2 id="view-the-service-unit-file">View the service unit file</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>systemctl cat <span style="color:#f92672">[</span>servicename<span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="stop-and-disable-the-service">Stop and disable the service</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>systemctl stop <span style="color:#f92672">[</span>servicename<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>systemctl disable <span style="color:#f92672">[</span>servicename<span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="remove-the-service-file">Remove the service file</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>rm /etc/systemd/system/<span style="color:#f92672">[</span>servicename<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>rm /etc/systemd/system/<span style="color:#f92672">[</span>servicename<span style="color:#f92672">]</span> <span style="color:#75715e">#symlinks that might be related</span>
</span></span></code></pre></div><h2 id="reload-systemd-configuration">Reload systemd configuration</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>systemctl daemon-reload
</span></span></code></pre></div><h2 id="reset-the-failed-systemd-service">Reset the failed systemd service</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>systemctl reset-failed
</span></span></code></pre></div>]]></content></item><item><title>(Linux) Convert pem to ppk</title><link>https://rizwan-kh.github.io/posts/2018/02/linux-convert-pem-to-ppk/</link><pubDate>Wed, 14 Feb 2018 00:28:21 +0400</pubDate><guid>https://rizwan-kh.github.io/posts/2018/02/linux-convert-pem-to-ppk/</guid><description>Convert PEM to PPK &amp;amp; PPK to PEM If you&amp;rsquo;re using AWS EC2, you may need to convert PPK to PEM (or vice versa) when trying to SSH from different operating systems. Below are instructions on how to perform these conversions using the puttygen tool.
Convert PPK to PEM Install puttygen:
On Linux: You can install putty-tools using your package manager. For example, on Debian-based systems, run: sudo apt-get install putty-tools On Windows: Download and install PuTTY from the official website.</description><content type="html"><![CDATA[<h1 id="convert-pem-to-ppk--ppk-to-pem">Convert PEM to PPK &amp; PPK to PEM</h1>
<p>If you&rsquo;re using AWS EC2, you may need to convert PPK to PEM (or vice versa) when trying to SSH from different operating systems. Below are instructions on how to perform these conversions using the <code>puttygen</code> tool.</p>
<h2 id="convert-ppk-to-pem">Convert PPK to PEM</h2>
<ol>
<li>
<p><strong>Install <code>puttygen</code></strong>:</p>
<ul>
<li>On <strong>Linux</strong>: You can install <code>putty-tools</code> using your package manager. For example, on Debian-based systems, run:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>sudo apt-get install putty-tools
</span></span></code></pre></div></li>
<li>On <strong>Windows</strong>: Download and install PuTTY from the <a href="https://www.putty.org/">official website</a>.</li>
</ul>
</li>
<li>
<p><strong>Convert the file</strong>:</p>
<ul>
<li>Open your terminal or command prompt.</li>
<li>Run the following command to convert the PPK file to PEM format:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>puttygen your-key.ppk -O private-openssh -o your-key.pem
</span></span></code></pre></div></li>
</ul>
<p>Replace <code>your-key.ppk</code> with the name of your PPK file, and <code>your-key.pem</code> with the desired name for your PEM file.</p>
</li>
</ol>
<h2 id="convert-pem-to-ppk">Convert PEM to PPK</h2>
<ol>
<li>
<p><strong>Install <code>puttygen</code></strong>: Follow the same installation steps as above.</p>
</li>
<li>
<p><strong>Convert the file</strong>:</p>
<ul>
<li>Open your terminal or command prompt.</li>
<li>Run the following command to convert the PEM file to PPK format:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>puttygen your-key.pem -O private -o your-key.ppk
</span></span></code></pre></div></li>
</ul>
<p>Replace <code>your-key.pem</code> with the name of your PEM file, and <code>your-key.ppk</code> with the desired name for your PPK file.</p>
</li>
</ol>
<h2 id="summary">Summary</h2>
<ul>
<li><strong>PEM to PPK</strong>: Use <code>puttygen your-key.pem -O private -o your-key.ppk</code></li>
<li><strong>PPK to PEM</strong>: Use <code>puttygen your-key.ppk -O private-openssh -o your-key.pem</code></li>
</ul>
<p>These conversions are particularly useful for managing SSH keys across different systems and applications. Ensure that you handle and store your private keys securely.</p>
]]></content></item><item><title>Delve - Go Debugger</title><link>https://rizwan-kh.github.io/posts/1/01/delve-go-debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rizwan-kh.github.io/posts/1/01/delve-go-debugger/</guid><description>Introduction Delve is a powerful debugger for Go(Golang).
Installation To install latest version of Delve, use the below command
go install github.com/go-delve/delve/cmd/dlv@latest Make sure that $GOPATH/bin or your Go binary path is in your PATH environment variable.
Quick Usage You can use delve in many ways, the one I prefer is as below
Start a Program with Delve
You can start a Go program under Delve by running:
dlv debug &amp;lt;program.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://github.com/go-delve/delve">Delve</a> is a powerful debugger for Go(Golang).</p>
<h2 id="installation">Installation</h2>
<p>To install latest version of Delve, use the below command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>go install github.com/go-delve/delve/cmd/dlv@latest
</span></span></code></pre></div><p>Make sure that <code>$GOPATH/bin</code> or your Go binary path is in your <code>PATH</code> environment variable.</p>
<h2 id="quick-usage">Quick Usage</h2>
<p>You can use delve in many ways, the one I prefer is as below</p>
<ul>
<li>
<p>Start a Program with Delve</p>
<p>You can start a Go program under Delve by running:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dlv debug &lt;program.go&gt;
</span></span></code></pre></div><p>This will compile and run the program in debug mode, allowing you to set breakpoints and interact with it.</p>
</li>
<li>
<p>Attach to a Running Process</p>
<p>If your Go program is already running, you can attach Delve to it by using the process ID (PID):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>dlv attach &lt;pid&gt;
</span></span></code></pre></div></li>
</ul>
<h3 id="basic-commands">Basic Commands</h3>
<p>Once delve is running, you can use the below commands to move around</p>
<ul>
<li>
<p>Set breakpoints</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>break &lt;function_name&gt;
</span></span></code></pre></div><p>Or for specific lines</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>break &lt;filename&gt;:&lt;line_number&gt;
</span></span></code></pre></div></li>
<li>
<p>Run program</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#66d9ef">continue</span>
</span></span></code></pre></div></li>
<li>
<p>Step through the code</p>
<ul>
<li>Step into function: <code>step</code></li>
<li>Step over function: <code>next</code></li>
<li>Step out of current function: <code>stepout</code></li>
</ul>
</li>
<li>
<p>Inspect variables</p>
<ul>
<li>Print variable: <code>print &lt;variable_name&gt;</code></li>
<li>Display the value of a variable at a breakpoint.</li>
</ul>
</li>
<li>
<p>List breakpoints</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>breakpoints
</span></span></code></pre></div></li>
<li>
<p>Exit the debug mode</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>quit
</span></span></code></pre></div></li>
</ul>
]]></content></item><item><title>GKE Audit logs - Find the cluster resources audit logs</title><link>https://rizwan-kh.github.io/posts/1/01/gke-audit-logs-find-the-cluster-resources-audit-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rizwan-kh.github.io/posts/1/01/gke-audit-logs-find-the-cluster-resources-audit-logs/</guid><description>Introduction In a scenario where you need to validate the creator of a specific Google Kubernetes Engine (GKE) cluster, especially when there is no clear ownership or standard naming conventions, leveraging the Google Logging Console can provide valuable insights. This guide aims to demonstrate how you can utilize Google Cloud&amp;rsquo;s Logging Console to identify the creator of a GKE cluster.
Commands The following command is designed to be executed in the Cloud Logging console.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In a scenario where you need to validate the creator of a specific Google Kubernetes Engine (GKE) cluster, especially when there is no clear ownership or standard naming conventions, leveraging the Google Logging Console can provide valuable insights. This guide aims to demonstrate how you can utilize Google Cloud&rsquo;s Logging Console to identify the creator of a GKE cluster.</p>
<h2 id="commands">Commands</h2>
<p>The following command is designed to be executed in the Cloud Logging console. Ensure to replace the placeholder with the actual cluster name within the quotes in the last line.</p>
<h3 id="cluster-created">Cluster Created</h3>
<pre tabindex="0"><code>resource.type=&#34;gke_cluster&#34;
(log_id(&#34;cloudaudit.googleapis.com/data_access&#34;) OR
log_id(&#34;cloudaudit.googleapis.com/activity&#34;))
protoPayload.methodName:&#34;CreateCluster&#34;
resource.labels.cluster_name=&#34;autopilot-cluster-1&#34;
</code></pre><h2 id="additional-examples">Additional Examples</h2>
<h3 id="cluster-deleted">Cluster Deleted</h3>
<p>To identify who deleted a GKE cluster:</p>
<pre tabindex="0"><code>resource.type=&#34;gke_cluster&#34;
(log_id(&#34;cloudaudit.googleapis.com/data_access&#34;) OR
log_id(&#34;cloudaudit.googleapis.com/activity&#34;))
protoPayload.methodName:&#34;DeleteCluster&#34;
resource.labels.cluster_name=&#34;your-cluster-name&#34;
</code></pre><h3 id="node-pool-created">Node Pool Created</h3>
<p>To find out who created a specific GKE node pool:</p>
<pre tabindex="0"><code>resource.type=&#34;gke_nodepool&#34;
(log_id(&#34;cloudaudit.googleapis.com/data_access&#34;) OR
log_id(&#34;cloudaudit.googleapis.com/activity&#34;))
protoPayload.methodName:&#34;CreateNodePool&#34;
resource.labels.node_pool_name=&#34;your-node-pool-name&#34;
</code></pre><p>These commands can be adapted based on your specific use case, allowing you to gain insights into various GKE cluster activities through the Google Logging Console.</p>
]]></content></item></channel></rss>