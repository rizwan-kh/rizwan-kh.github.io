<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Rizwan Khanüë®üèª‚Äçüíª</title>
        <link>https://rizwan-kh.github.io/posts/</link>
        <description>Recent content in Posts on Rizwan Khanüë®üèª‚Äçüíª</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 12 Feb 2020 12:11:00 +0400</lastBuildDate>
        <atom:link href="https://rizwan-kh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Gitlab CI &amp; Kaniko to build Docker Images</title>
            <link>https://rizwan-kh.github.io/posts/2020/02/gitlab-ci-kaniko-to-build-docker-images/</link>
            <pubDate>Wed, 12 Feb 2020 12:11:00 +0400</pubDate>
            
            <guid>https://rizwan-kh.github.io/posts/2020/02/gitlab-ci-kaniko-to-build-docker-images/</guid>
            <description>Introduction You can build container images from a Dockerfile inside a container or a Kubernetes cluster, though J√©r√¥me Petazzoni strongly discourages from doing so. He wrote a detailed blog that can be read here on why not to build container images using Dockerfile inside a container or a Kubernetes cluster.
 Context You will get N number of blogs on how to use the CI/CD of GitLab; here we will see an easy reference point to extend a file and create CI/CD for Docker Image to be built and stored in the same GitLab registry using kaniko.</description>
            <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>You can build container images from a Dockerfile inside a container or a Kubernetes cluster, though <em>J√©r√¥me Petazzoni</em> strongly discourages from doing so. He wrote a detailed blog that can be read <a href="http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/">here</a> on why not to build container images using Dockerfile inside a container or a Kubernetes cluster.</p>
<hr>
<h4 id="context">Context</h4>
<p>You will get <code>N</code> number of blogs on how to use the CI/CD of GitLab; here we will see an easy reference point to extend a file and create CI/CD for Docker Image to be built and stored in the same GitLab registry using <a href="https://cloud.google.com/blog/products/gcp/introducing-kaniko-build-container-images-in-kubernetes-and-google-container-builder-even-without-root-access">kaniko</a>. This file needs to be created in the individual project in the GitLab using the template available with the name .gitlab-ci.yml.</p>
<hr>
<h4 id="what-is-kaniko">What is Kaniko?</h4>
<p><code>Note: Kaniko is not an officially supported Google product</code>
It is a tool to build container images from a Dockerfile inside a container or a Kubernetes cluster. It doesn&rsquo;t depend on the Docker daemon to run each Dockerfile command.</p>
<p>It comes with it&rsquo;s own limitations, but we don&rsquo;t run the risk of using Docker-in-Docker</p>
<hr>
<h4 id="prerequisites">Prerequisites</h4>
<ul>
<li>Access to GitLab (either private self hosted or managed)</li>
<li>GitLab project with a Dockerfile</li>
</ul>
<hr>
<h4 id="ci-yaml-for-auto-devops">CI YAML for auto-devops</h4>
<pre><code># .gitlab-ci.yml
variables:
    GIT_SSL_NO_VERIFY: &quot;true&quot;

before_script:
  - echo &quot;Random image creation, user = $GITLABUSER&quot;

stages:
  - build

build_image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [&quot;&quot;]
  stage: build
  script:
    - ls
    - pwd
    - export CI_REGISTRY_IMAGE=mygitlab.com/base-project/subproject/project
    - echo &quot;{\&quot;auths\&quot;:{\&quot;mygitlab.com\&quot;:{\&quot;username\&quot;:\&quot;gitlab-ci-token\&quot;,\&quot;password\&quot;:\&quot;$CI_BUILD_TOKEN\&quot;},\&quot;repository.xyz-company.io\&quot;:{\&quot;username\&quot;:\&quot;user\&quot;,\&quot;password\&quot;:\&quot;123random\&quot;}}}&quot; &gt; /kaniko/.docker/config.json
    - wget https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem | xargs cat lets-encrypt-x3-cross-signed.pem &gt;&gt; /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --skip-tls-verify --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME

</code></pre><hr>
<p><strong>variables</strong>: These are static values which aren&rsquo;t going to change and is used at multiple location in the gitlab-ci.yml file</p>
<p><strong>before_script</strong>: Set(s) of commands or echo statement we want to print</p>
<p><strong>stages</strong>: Stages are block of code for an identical job or set of jobs viz. build, test, clean-up, delete, deploy, etc. This executes in the order it&rsquo;s defined in the YAML. A dot(.) in front of any job(block of code) disables it and it won&rsquo;t be executed or available neither as an automatic or manual job.</p>
<p><strong>Jobs (Each block of code)</strong>: Each block of individual stage contains key-value pair or set of commands to it. We can define each block of code to point to a particular stage and all the set of commands it requires to perform that function in the script block. It can be made to run automatically and also manual (start the job manually by clicking a button). The variables like password, access/secret key can be defined in the CI/CD settings under secret variables section so it&rsquo;s not available in plain text format.</p>
<hr>
<p><strong>Note</strong>: If you want to use the GitLab docker registry and store docker images in the GitLab project; this by default is disabled and needs to be enabled in the General setting section.</p>
]]></content>
        </item>
        
        <item>
            <title>How to use service accounts for Kubernetes imagePullSecrets</title>
            <link>https://rizwan-kh.github.io/posts/2020/01/how-to-use-service-accounts-for-kubernetes-imagepullsecrets/</link>
            <pubDate>Thu, 02 Jan 2020 17:40:27 +0400</pubDate>
            
            <guid>https://rizwan-kh.github.io/posts/2020/01/how-to-use-service-accounts-for-kubernetes-imagepullsecrets/</guid>
            <description>What are Service Accounts in Kubernetes? As per Kubernetes.io - A service account provides an identity for processes that run in a Pod.
One can think of service accounts as service users for pods. They help pods authenticate with the api-server and interact with it.
 Many times, we come across a situation where our organization uses a private Docker registry to store the Docker images and to make this available we need to create a docker-registry kubernetes secret and pass as imagePullSecrets in the deployment manifest.</description>
            <content type="html"><![CDATA[<h2 id="what-are-service-accounts-in-kubernetes">What are Service Accounts in Kubernetes?</h2>
<p>As per <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Kubernetes.io</a> - A service account provides an identity for processes that run in a Pod.</p>
<p>One can think of service accounts as service users for pods. They help pods authenticate with the api-server and interact with it.</p>
<h2 id="heading"></h2>
<p>Many times, we come across a situation where our organization uses a private Docker registry to store the Docker images and to make this available we need to create a <code>docker-registry</code> kubernetes secret and pass as <code>imagePullSecrets</code> in the deployment manifest.</p>
<pre><code>kubectl create secret docker-registry registry-cred \
 --docker-server=my.private-registry.com \
 --docker-username=my_username \
 --docker-password=&quot;my_superr_strong_password&quot; \
 --docker-email=my.email@mycompany.com -n my-namespace
</code></pre><p>Then, we pass this secret in the deployment manifest as below.</p>
<pre><code>...
      imagePullSecrets:
      - name: registry-cred
...

</code></pre><h2 id="the-problem-with-this-approach">The problem with this approach?</h2>
<p>Not many that I can think of, except below ones:</p>
<ul>
<li>The deployment yaml are generally developed by Developers who doesn&rsquo;t need to know about this credentials</li>
<li>If there are a large number of pods in the namespace, then each manifest needs to be updated, whenever the password is rotated</li>
</ul>
<h2 id="the-solution">The solution</h2>
<p><code>serviceAccounts</code> - your Kubernetes administrator can just patch serviceAccounts with the registry credential secret and you don&rsquo;t need to worry about replacing or adding it in your manifest yaml each time.</p>
<pre><code>kubectl patch serviceaccount default \
-p '{&quot;imagePullSecrets&quot;: [{&quot;name&quot;: &quot;registry-cred&quot;}]}' -n my-namespace
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Docker Cheat Sheet</title>
            <link>https://rizwan-kh.github.io/posts/2019/10/docker-cheat-sheet/</link>
            <pubDate>Fri, 11 Oct 2019 05:11:13 +0400</pubDate>
            
            <guid>https://rizwan-kh.github.io/posts/2019/10/docker-cheat-sheet/</guid>
            <description>Below are few of the main and basic commands used in Docker, an easy pick-up and good-to-go command page for docker troubleshooting.
Alias  If you are a lazy developer/sysadmin like me, the first thing you should do on your system is to make easy alias of all the long commands, below are the ones I often use on any system I use on a daily basis:
These can be imported on ~/.</description>
            <content type="html"><![CDATA[<p>Below are few of the main and basic commands used in Docker, an easy pick-up and good-to-go command page for docker troubleshooting.</p>
<h2 id="alias">Alias</h2>
<hr>
<p>If you are a lazy developer/sysadmin like me, the first thing you should do on your system is to make easy alias of all the long commands, below are the ones I often use on any system I use on a  daily basis:</p>
<p>These can be imported on ~/.bashrc (if you use bash) or ~/.zshrc (if you are a MAC user and use ZSH)</p>
<pre><code>alias docker='sudo docker'
alias dock='sudo docker'
alias di='sudo docker images'
alias drun='sudo docker run -ti'
alias dbuild='sudo docker build'
alias dexec='sudo docker exec -ti'
alias dps='sudo docker ps -a'
alias dpsq='sudo docker ps -a -q'
alias drm='sudo docker rm'
alias drmi='sudo docker rmi'
alias dstop='sudo docker stop'

</code></pre><h3 id="commands-and-their-usage">Commands and their usage</h3>
<p>Mostly used commands are aliased above, but to explain what each does, please read on</p>
<pre><code># to build a docker image with a certain name and certain tag, use the below Docker build comamnd
docker build --tag imagename:tagname --file /path/to/Dockerfile


# to check the docker images
docker images


# to run a docker container in detach mode publishing hostport:containerport and mounting a host vol to container vol, giving a name to the runnging container and the hostname to container
docker run --tty --interactive --publish 2222:22 --hostname my-x-host --volume /hostvolume:/containervol --name name-of-running-container --detach imagename:tagname
# docker run -ti -p 2222:22 -h my-x-host -v /hostvolume:/containervol -n name-of-running-container -d imagename:tagname (this is shorter version of the above command)


# to see all running containers
docker ps


# to see all containers (running, stopped, exited, etc.)
docker ps -a


# to get inside a running container
docker exec -ti CONTAINERNAME/CONTAINERID bash


# to stop a running container
docker stop CONTAINERNAME/CONTAINERID


# to remove a stopped container
docker rm CONTAINERNAME/CONTAINERID

# to see logs from containers
docker logs CONTAINERNAME/CONTAINERID
</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
